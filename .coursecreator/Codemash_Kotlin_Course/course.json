{
  "lessons": [
    {
      "id": 0,
      "title": "Introduction",
      "task_list": [
        {
          "name": "Hello, World",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun main(args: Array\u003cString\u003e){\n    println(Print something out here)\n}",
              "placeholders": [
                {
                  "offset": 43,
                  "length": 24,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Say something... anything, really.",
                        "Could be your name. Could be \"Hello World.\" I dunno. "
                      ],
                      "possible_answer": "\"Hello World\"",
                      "placeholder_text": "Print something out here",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n\n    private val outContent \u003d ByteArrayOutputStream()\n    private val errContent \u003d ByteArrayOutputStream()\n\n    @Before\n    fun setUpStreams() {\n        System.setOut(PrintStream(outContent))\n        System.setErr(PrintStream(errContent))\n    }\n\n    @After\n    fun cleanUpStreams() {\n        System.setOut(null)\n        System.setErr(null)\n    }\n\n\n    @Test fun testSolution() {\n\n        main(arrayOf(\"\"))\n\n        Assert.assertNotNull(outContent.toString())\n        Assert.assertTrue(outContent.toString().trim() !\u003d \"\")\n    }\n}"
          },
          "task_texts": {
            "task": "Write task description here using markdown or html"
          },
          "task_type": "edu"
        },
        {
          "name": "Look, ma, no class!",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "// Create the function \"sum\" that takes two integer parameters and adds them together\nDeclare the function \"sum\" here",
              "placeholders": [
                {
                  "offset": 86,
                  "length": 31,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "fun sum(x : Int, y : Int) : Int",
                        "fun sum(x : Int, y : Int) : Int \n{\n    return \u003csomething\u003e\n}"
                      ],
                      "possible_answer": "fun sum(x : Int, y : Int) : Int\n{\n    return x + y\n}",
                      "placeholder_text": "Declare the function \"sum\" here",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        Assert.assertTrue(sum(0, 2) \u003d\u003d 2)\n        Assert.assertTrue(sum(1, 2) \u003d\u003d 3)\n        Assert.assertTrue(sum(2, 2) \u003d\u003d 4)\n    }\n}"
          },
          "task_texts": {
            "task": "# Functions \n\nUnlike Java, we can simply declare a function without an enclosing class. No more static utility classes!\n\nFunctions in Kotlin are declared using the fun keyword. The return type is denoted after the parameters.\n```\nfun double(x: Int): Int {\n    return 2 * x\n}\n```\n\u003e In this example, we have a function `double` that takes an integer as it\u0027s parameter and returns and Int.\n\n\nCalling functions uses the traditional approach:\n\n```\nval result \u003d double(2)\n```\n\nFunction parameters are defined using Pascal notation, i.e. name: type. Parameters are separated using commas. Each parameter must be explicitly typed:\n```\nfun powerOf(number: Int, exponent: Int) {\n...\n}\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "Another way to write functions",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "// Rewrite the \"sum\" function in one line\nDon\u0027t cheat. One line only.",
              "placeholders": [
                {
                  "offset": 42,
                  "length": 27,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "fun sum(x: Int, y: Int) \u003d ..."
                      ],
                      "possible_answer": "fun sum(x: Int, y: Int) \u003d x + y",
                      "placeholder_text": "Don\u0027t cheat. One line only.",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        Assert.assertTrue(sum(0, 2) \u003d\u003d 2)\n        Assert.assertTrue(sum(1, 2) \u003d\u003d 3)\n        Assert.assertTrue(sum(2, 2) \u003d\u003d 4)\n    }\n}"
          },
          "task_texts": {
            "task": "# Functions (Part 2)\n\nFunctions can, also, be expressed in a single line whose return type is inferred. \n\nEx: \n```\nfun double(x: Int) \u003d 2 * x\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "Variables",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun main(){\n    // Variables can be declared as mutable (var \u003d\u003d \"variable\")\n    var myString : String \u003d \"\"\n    myString \u003d \"Foo\"\n\n    // But they can also be declared as immutable (val \u003d\u003d \"value\" or read-only)\n    val immutableString : String \u003d \"Bar\"\n    // immutableString \u003d \"Baz\"  // \u003c-- This would cause a compiler error\n\n    // The type of a variable can be inferred when it is initialized\n    val inferredType \u003d 2\n\n    // Type required when no initializer is provided, but the assignment can be deferred\n    val c: Int\n    c \u003d 3\n    // c \u003d 4 // \u003c-- This would cause a compiler error because the variable was previously assigned\n}",
              "placeholders": []
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n\n        Assert.assertTrue(\"Tests not implemented for the task\", true)\n    }\n}"
          },
          "task_texts": {
            "task": "# Variables\n\n\u003cstrong\u003eNote: There\u0027s nothing to implement for this task. Just read the code and click the \"check task\" button\u003c/strong\u003e\n\nThis example shows how to declare and initialize variables. \n\nAlso, we can see how to declare mutable/immutable variables in kotlin.\n\n```\nval a: Int \u003d 1  // immediate assignment\nval b \u003d 2   // `Int` type is inferred\nval c: Int  // Type required when no initializer is provided\nc \u003d 3       // deferred assignment\n```\n"
          },
          "task_type": "edu"
        },
        {
          "name": "Types",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "// Yeah, there\u0027s no test on this one. Just an fyi...\n",
              "placeholders": []
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        //TODO: implement your test here\n        Assert.assertTrue(\"Tests not implemented for the task\", true)\n    }\n}\n"
          },
          "task_texts": {
            "task": "\n# Basic Types\n## Numbers\nKotlin provides the following built-in types representing numbers (this is close to Java):\n```\nType\tBit width\nDouble\t64\nFloat\t32\nLong\t64\nInt\t    32\nShort\t16\nByte\t8\n```\n\nThe floating-point types are: \n```\nType\tBit width\nDouble  64 \nFloat   32 \n```\n\nEach number type has helper functions that convert from one number type to another: \n`toByte(), toInt(), toLong(), toFloat(), toDouble(), toChar(), toShort()`\n```\nval myInt \u003d 987\nval myLong \u003d myInt.toLong()\n```\n\n## Booleans\nThe Boolean type in Kotlin is the same as in Java. Its value can be either true or false. The operations disjunction (||), conjunction (\u0026\u0026), and negation (!) can be performed on boolean types, just like Java.\n```\nval myTrueBoolean \u003d true\nval myFalseBoolean \u003d false\n```\n\n## Strings\nStrings can be created with either double quotes or triple quotes. In addition to that, escape characters can be used with double quotes.\n```\nval myString \u003d \"This is a String\"\nval escapeString \u003d \"This is a string with new line \\n\"\n```\nTo create a string that spans multiple lines in the source file, we use triple quotes:\n```\nval multipleStringLines \u003d \"\"\"\n        This is first line\n        This is second line\n        This is third line \"\"\"\n```   \n\nKotlin also supports string interpolation or string templates. This is an easier way to build dynamic strings than concatenation, which is what we use in Java. Using string templates, we can insert variables and expressions into a string.\n\n```\nval accountBalance \u003d 200\nval bankMessage \u003d \"Your account balance is $accountBalance\" // Your account balance is 200\n``` \n"
          },
          "task_type": "edu"
        },
        {
          "name": "Nullable Types",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "\n// Use the elvis operator to return 0 if the string is null\nfun strLenSafe(s: String?): Int \u003d TODO\n\nfun testSafeString() {\n    println(strLenSafe(\"abc\"))\n    println(strLenSafe(null))\n}",
              "placeholders": [
                {
                  "offset": 95,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "s?.length ?: 0",
                      "placeholder_text": "TODO",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n    private val outContent \u003d ByteArrayOutputStream()\n    private val errContent \u003d ByteArrayOutputStream()\n\n    @Before\n    fun setUpStreams() {\n        System.setOut(PrintStream(outContent))\n        System.setErr(PrintStream(errContent))\n    }\n\n    @After\n    fun cleanUpStreams() {\n        System.setOut(null)\n        System.setErr(null)\n    }\n\n\n    @Test fun testSolution() {\n\n        testSafeString()\n        Assert.assertNotNull(outContent.toString())\n\n        val testResults \u003d arrayOf(\"3\", \"0\")\n        val results \u003d outContent.toString().split(\"\\r\\n\")\n        results.filter { it !\u003d \"\" }\n                .forEach { Assert.assertTrue(testResults.contains(it)) }\n    }\n}"
          },
          "task_texts": {
            "task": "# Nullable Types\nKotlin\u0027s type system is aimed at eliminating the danger of null references from code, also known as the The Billion Dollar Mistake.\n\nOne of the most common pitfalls in many programming languages, including Java, is that of accessing a member of a null reference, resulting in a null reference exception. In Java this would be the equivalent of a NullPointerException or NPE for short.\n\nKotlin\u0027s type system is aimed to eliminate NullPointerException\u0027s from our code. The only possible causes of NPE\u0027s may be\n\n- An explicit call to throw NullPointerException();\n- Usage of the !! operator \n- External Java code has caused it;\n- There\u0027s some data inconsistency with regard to initialization (an uninitialized this available in a constructor is used somewhere).\n\nIn Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references). For example, a regular variable of type String can not hold null:\n\n```\nvar a: String \u003d \"abc\"\na \u003d null // compilation error\n```\n\nTo allow nulls, we can declare a variable as nullable string, written String?:\n```\nvar b: String? \u003d \"abc\"\nb \u003d null // ok\n```\n\n### Checking for null in conditions\nFirst, you can explicitly check if b is null, and handle the two options separately:\n```\nval l \u003d if (b !\u003d null) b.length else -1\n```\n\nYour second option is the safe call operator, written ?.:\n```\nb?.length\n```\nThis returns b.length if b is not null, and null otherwise. The type of this expression is Int?.\n\n\n### Elvis Operator\nWhen we have a nullable reference r, we can say \"if r is not null, use it, otherwise use some non-null value x\":\n```\nval l: Int \u003d if (b !\u003d null) b.length else -1\n```\nAlong with the complete if-expression, this can be expressed with the Elvis operator, written ?::\n```\nval l \u003d b?.length ?: -1\n```\nIf the expression to the left of ?: is not null, the elvis operator returns it, otherwise it returns the expression to the right. Note that the right-hand side expression is evaluated only if the left-hand side is null.\n\n### The !! Operator\nThe third option is for NPE-lovers: the not-null assertion operator (!!) converts any value to a non-null type and throws an exception if the value is null. We can write b!!, and this will return a non-null value of b (e.g., a String in our example) or throw an NPE if b is null:\n```\nval l \u003d b!!.length\n```\nThus, if you want an NPE, you can have it, but you have to ask for it explicitly, and it does not appear out of the blue.\n"
          },
          "task_type": "edu"
        },
        {
          "name": "Java To Kotlin",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "Copy the Java Code here",
              "placeholders": [
                {
                  "offset": 0,
                  "length": 23,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "class Person(val name: String, val age: Int)",
                      "placeholder_text": "Copy the Java Code here",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        var person \u003d Person(\"Test\", 1)\n\n        Assert.assertNotNull(person)\n    }\n}"
          },
          "task_texts": {
            "task": "# Java to Kotlin Tool\n\nIntellij/Android Studio has a handy tool for Java developers: Java to Kotlin converter. \n\nThis tool makes it easy to convert java code to kotlin code.\n\nTo become familiar with it, please copy the following class (Java) and paste in to the test file.\n\n```\npublic class Person {\n    private final String name;\n    private final int age;\n\n    public Person(String name, int age) {\n        this.name \u003d name;\n        this.age \u003d age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n```"
          },
          "task_type": "edu"
        }
      ]
    },
    {
      "id": 0,
      "title": "Control Flow",
      "task_list": [
        {
          "name": "If Expression",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "\n// Complete this function using the if expression\nfun max(a: Int, b: Int) \u003d TODO",
              "placeholders": [
                {
                  "offset": 77,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "if(a \u003e b) a else b",
                      "placeholder_text": "TODO",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n\n        Assert.assertTrue(max(10, 1) \u003d\u003d 10)\n        Assert.assertTrue(max(1, 10) \u003d\u003d 10)\n    }\n}"
          },
          "task_texts": {
            "task": "# If Expression\n\nIn Kotlin, if is an expression, i.e. it returns a value. Therefore there is no ternary operator (condition ? then : else), because ordinary if works fine in this role.\n```\n// Traditional usage \nvar max \u003d a \nif (a \u003c b) max \u003d b\n\n// With else \nvar max: Int\nif (a \u003e b) {\n    max \u003d a\n} else {\n    max \u003d b\n}\n \n// As expression \nval max \u003d if (a \u003e b) a else b\n```\n\nif branches can be blocks, and the last expression is the value of a block:\n```\nval max \u003d if (a \u003e b) {\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "When Expression",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun isOdd(x: Int)  \u003d x % 2 !\u003d 0\nfun isEven(x: Int) \u003d x % 2 \u003d\u003d 0\n\nfun testWhenExpression(number: Int){\n    when{\nWhen number isOdd, print the word \"Odd\". When number isEven, print the word \"Even\"\n    }\n}",
              "placeholders": [
                {
                  "offset": 112,
                  "length": 82,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "        isOdd(number) -\u003e println(\"Odd\")\n        isEven(number) -\u003e println(\"Even\")",
                      "placeholder_text": "When number isOdd, print the word \"Odd\". When number isEven, print the word \"Even\"",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n    private val outContent \u003d ByteArrayOutputStream()\n    private val errContent \u003d ByteArrayOutputStream()\n\n    @Before\n    fun setUpStreams() {\n        System.setOut(PrintStream(outContent))\n        System.setErr(PrintStream(errContent))\n    }\n\n    @After\n    fun cleanUpStreams() {\n        System.setOut(null)\n        System.setErr(null)\n    }\n\n\n    @Test fun testSolution() {\n\n        for(i in 1 .. 100){\n            testWhenExpression(i)\n            Assert.assertNotNull(outContent.toString())\n\n            if(isEven(i)) {\n                Assert.assertTrue(outContent.toString().trim() \u003d\u003d \"Even\")\n            }\n            else{\n                Assert.assertTrue(outContent.toString().trim() \u003d\u003d \"Odd\")\n            }\n\n            outContent.reset()\n        }\n    }\n}"
          },
          "task_texts": {
            "task": "# When Expression\nwhen replaces the switch operator of C-like languages. In the simplest form it looks like this\n```\nwhen (x) {\n    1 -\u003e print(\"x \u003d\u003d 1\")\n    2 -\u003e print(\"x \u003d\u003d 2\")\n    else -\u003e { // Note the block\n        print(\"x is neither 1 nor 2\")\n    }\n}\n```\n\nwhen matches its argument against all branches sequentially until some branch condition is satisfied. when can be used either as an expression or as a statement. If it is used as an expression, the value of the satisfied branch becomes the value of the overall expression. If it is used as a statement, the values of individual branches are ignored. (Just like with if, each branch can be a block, and its value is the value of the last expression in the block.)\n\nThe else branch is evaluated if none of the other branch conditions are satisfied. If when is used as an expression, the else branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions.\n\nIf many cases should be handled in the same way, the branch conditions may be combined with a comma:\n```\nwhen (x) {\n    0, 1 -\u003e print(\"x \u003d\u003d 0 or x \u003d\u003d 1\")\n    else -\u003e print(\"otherwise\")\n}\n```\n\nWe can use arbitrary expressions (not only constants) as branch conditions\n```\nwhen (x) {\n    parseInt(s) -\u003e print(\"s encodes x\")\n    else -\u003e print(\"s does not encode x\")\n}\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "Loops",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun forLoopTest(){\n\n    val language \u003d arrayOf(\"Ruby\", \"Kotlin\", \"Python\", \"Java\")\n\nCreate a loop that prints the contents of the language array\n}",
              "placeholders": [
                {
                  "offset": 84,
                  "length": 60,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "for(item in language)"
                      ],
                      "possible_answer": "    for (item in language)\n        println(item)",
                      "placeholder_text": "Create a loop that prints the contents of the language array",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n    private val outContent \u003d ByteArrayOutputStream()\n    private val errContent \u003d ByteArrayOutputStream()\n\n    @Before\n    fun setUpStreams() {\n        System.setOut(PrintStream(outContent))\n        System.setErr(PrintStream(errContent))\n    }\n\n    @After\n    fun cleanUpStreams() {\n        System.setOut(null)\n        System.setErr(null)\n    }\n\n\n    @Test fun testSolution() {\n\n        val languages \u003d arrayOf(\"Ruby\", \"Kotlin\", \"Python\", \"Java\")\n\n        forLoopTest()\n\n        Assert.assertNotNull(outContent.toString())\n        val results \u003d outContent.toString().split(\"\\r\\n\")\n        results\n            .filter { it !\u003d \"\" }\n            .forEach { Assert.assertTrue(languages.contains(it)) }\n    }\n}"
          },
          "task_texts": {
            "task": "# Loops\n\nThere is no traditional for loop in Kotlin unlike Java and other languages.\n\nIn Kotlin, for loop is used to iterate through ranges, arrays, maps and so on (anything that provides an iterator).\n\nKotlin for loop iterates through anything that provides an iterator.\n\nWe\u0027ll talk about ranges, arrays, maps later in this series, but for now the syntax of for loop in Kotlin is:\n```\nfor (item in collection) {\n    // body of loop\n}\n```"
          },
          "task_type": "edu"
        }
      ]
    },
    {
      "id": 0,
      "title": "Classes",
      "task_list": [
        {
          "name": "Basic Class",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "// Create a Customer class with a \"name\" property\nCreate Customer Class Here\n\nfun foo(){\n\n    Create Customer object and initialize the Name property\n\n    println(customer.name)\n}",
              "placeholders": [
                {
                  "offset": 50,
                  "length": 26,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "class Customer( ???? )",
                        "class Customer(var name: String \u003d \"\")"
                      ],
                      "possible_answer": "class Customer(var name: String \u003d \"\")",
                      "placeholder_text": "Create Customer Class Here",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 94,
                  "length": 55,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "val customer \u003d Customer()\n\n    customer.name \u003d \"Michael\"",
                      "placeholder_text": "Create Customer object and initialize the Name property",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n    private val outContent \u003d ByteArrayOutputStream()\n    private val errContent \u003d ByteArrayOutputStream()\n\n    @Before\n    fun setUpStreams() {\n        System.setOut(PrintStream(outContent))\n        System.setErr(PrintStream(errContent))\n    }\n\n    @After\n    fun cleanUpStreams() {\n        System.setOut(null)\n        System.setErr(null)\n    }\n\n\n    @Test fun testSolution() {\n        foo()\n\n        Assert.assertNotNull(outContent.toString())\n        Assert.assertTrue(outContent.toString().trim() !\u003d \"\")\n    }\n}"
          },
          "task_texts": {
            "task": "# Basics of Classes\n```\nclass Invoice {\n}\n```\nThe class declaration consists of the class name, the class header (specifying its type parameters, the primary constructor etc.) and the class body, surrounded by curly braces. Both the header and the body are optional; if the class has no body, curly braces can be omitted.\n\n```\nclass Empty\n```\n\n## Constructors\nA class in Kotlin can have a primary constructor and one or more secondary constructors. The primary constructor is part of the class header: it goes after the class name (and optional type parameters).\n```\nclass Person constructor(firstName: String) {\n}\n```\nIf the primary constructor does not have any annotations or visibility modifiers, the constructor keyword can be omitted:\n```\nclass Person(firstName: String) {\n}\n```\nThe primary constructor cannot contain any code. Initialization code can be placed in initializer blocks, which are prefixed with the init keyword:\n```\nclass Customer(name: String) {\n    init {\n        logger.info(\"Customer initialized with value ${name}\")\n    }\n}\n```\n\nDeclaring properties and initializing them from the primary constructor, Kotlin has a concise syntax:\n```\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n    // ...\n}\n```\nMuch the same way as regular properties, the properties declared in the primary constructor can be mutable (var) or read-only (val)."
          },
          "task_type": "edu"
        },
        {
          "name": "Data Class",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "\n// Make the Customer class a \"data\" class\nTodo class Customer(var name: String \u003d \"\")\n\nfun isCustomerEqual() : Boolean{\n    val customer1 \u003d Customer(\"Michael\")\n    val customer2 \u003d customer1.copy()\n\n    return customer1 \u003d\u003d customer2\n}",
              "placeholders": [
                {
                  "offset": 43,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "use the \"data\" keyword"
                      ],
                      "possible_answer": "data",
                      "placeholder_text": "Todo",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        //TODO: implement your test here\n        Assert.assertTrue(isCustomerEqual())\n    }\n}"
          },
          "task_texts": {
            "task": "# Data Classes\n\nWe frequently create classes whose main purpose is to hold data. \n\nIn such a class some standard functionality and utility functions are often mechanically derivable from the data. In Kotlin, this is called a data class and is marked as data:\n```\ndata class User(val name: String, val age: Int)\n```\n\nThe compiler automatically derives the following members from all properties declared in the primary constructor:\n\n* equals()/hashCode() pair;\n* toString() of the form \"User(name\u003dJohn, age\u003d42)\";\n* copy() function (see below)."
          },
          "task_type": "edu"
        },
        {
          "name": "Properties",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "\n// Add a custom setter to PropertyExample.propertyWithCounter so that the counter property\n// is incremented every time propertyWithCounter is assigned to.\nclass PropertyExample {\n    var counter \u003d 0\n    var propertyWithCounter: Int? \u003d null\n        setAdd Custom Setter Here\n}\n",
              "placeholders": [
                {
                  "offset": 253,
                  "length": 22,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Use the \"field\" identifier to set the backing property. ",
                        "field \u003d value"
                      ],
                      "possible_answer": "(value){\n            field \u003d value\n            counter +\u003d 1\n        }",
                      "placeholder_text": "Add Custom Setter Here",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val propertyExample \u003d PropertyExample()\n        propertyExample.counter \u003d 0\n\n        Assert.assertTrue(propertyExample.counter \u003d\u003d 0)\n\n        propertyExample.propertyWithCounter \u003d 1\n        Assert.assertTrue(propertyExample.propertyWithCounter \u003d\u003d 1)\n        Assert.assertTrue(propertyExample.counter \u003d\u003d 1)\n\n        propertyExample.propertyWithCounter \u003d 2\n        Assert.assertTrue(propertyExample.propertyWithCounter \u003d\u003d 2)\n        Assert.assertTrue(propertyExample.counter \u003d\u003d 2)\n\n    }\n}"
          },
          "task_texts": {
            "task": "# Properties\nClasses in Kotlin can have properties. These can be declared as mutable, using the var keyword or read-only using the val keyword.\n```\nclass Address {\n    var name: String \u003d ...\n    var street: String \u003d ...\n    var city: String \u003d ...\n    var state: String? \u003d ...\n    var zip: String \u003d ...\n}\n```\nTo use a property, we simply refer to it by name, as if it were a field in Java:\n```\nfun copyAddress(address: Address): Address {\n    val result \u003d Address() // there\u0027s no \u0027new\u0027 keyword in Kotlin\n    result.name \u003d address.name // accessors are called\n    result.street \u003d address.street\n    // ...\n    return result\n}\n```\n\nGetters and Setters\nThe full syntax for declaring a property is\n```\nvar \u0026lt;propertyName\u0026gt;[: \u0026lt;PropertyType\u0026gt;] [\u003d \u0026lt;property_initializer\u0026gt;]\n    [\u0026lt;getter\u0026gt;]\n    [\u0026lt;setter\u0026gt;]\n```\n\nThe initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).\n\nWe can write custom accessors, very much like ordinary functions, right inside a property declaration. Here\u0027s an example of a custom getter:\n```\nval isEmpty: Boolean\n    get() \u003d this.size \u003d\u003d 0\n```\n\nA custom setter looks like this:\n```\nvar stringRepresentation: String\n    get() \u003d this.toString()\n    set(value) {\n        setDataFromString(value) // parses the string and assigns values to other properties\n    }\n```\n\nFields cannot be declared directly in Kotlin classes. However, when a property needs a backing field, Kotlin provides it automatically. This backing field can be referenced in the accessors using the field identifier:\n```\nvar counter \u003d 0 // the initializer value is written directly to the backing field\n    set(value) {\n        if (value \u003e\u003d 0) field \u003d value\n    }\n```\nThe field identifier can only be used in the accessors of the property."
          },
          "task_type": "edu"
        },
        {
          "name": "Inheritance",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "open class Building(var name: String){\n    fun info() \u003d \"A building called $name\"\n}\n\n\n// To create the house class, extend the building class.\n// Add an additional property, rooms,\nclass HouseComplete the house declaration \n\n\nfun testHouseMessage(house : House) {\n    println(\"${house.name} has ${house.rooms} rooms\")\n}\n\nfun testBuildingMessage(house : House){\n    println(house.info())\n}",
              "placeholders": [
                {
                  "offset": 192,
                  "length": 31,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "(name: String, var rooms: Int) : Building(name)",
                      "placeholder_text": "Complete the house declaration ",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n    private val outContent \u003d ByteArrayOutputStream()\n    private val errContent \u003d ByteArrayOutputStream()\n\n    @Before\n    fun setUpStreams() {\n        System.setOut(PrintStream(outContent))\n        System.setErr(PrintStream(errContent))\n    }\n\n    @After\n    fun cleanUpStreams() {\n        System.setOut(null)\n        System.setErr(null)\n    }\n\n\n    @Test fun testSolution() {\n        val houseText \u003d \"My House\"\n        val houseRooms \u003d 3\n        val testHouseMessageString \u003d \"$houseText has $houseRooms rooms\"\n        val testBuildingMessageString \u003d \"A building called $houseText\"\n\n        val houseTest \u003d House(houseText, houseRooms)\n\n        testHouseMessage(houseTest)\n        Assert.assertNotNull(outContent.toString())\n        Assert.assertTrue(outContent.toString().trim() \u003d\u003d testHouseMessageString)\n\n        outContent.reset()\n\n        testBuildingMessage(houseTest)\n        Assert.assertNotNull(outContent.toString())\n        Assert.assertTrue(outContent.toString().trim() \u003d\u003d testBuildingMessageString)\n    }\n}"
          },
          "task_texts": {
            "task": "# Inheritance\n\nBy default a Kotlin class is closed (sealed). Also, Kotlin only does single inheritance but can partially do multiple inheritance by composition.\n\n```\nopen class Base(p: Int)\n\nclass Derived(p: Int) : Base(p)\n```\n\nIf the class has a primary constructor, the base type can (and must) be initialized right there, using the parameters of the primary constructor."
          },
          "task_type": "edu"
        },
        {
          "name": "Smart Casting",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun eval(expr: Expr): Int \u003d\n        when (expr) {\n            is Num -\u003e TODO\n            is Sum -\u003e TODO\n            else -\u003e throw IllegalArgumentException(\"Unknown expression\")\n        }\n\ninterface Expr\nclass Num(val value: Int) : Expr\nclass Sum(val left: Num, val right: Num) : Expr\n",
              "placeholders": [
                {
                  "offset": 72,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "expr.value",
                      "placeholder_text": "TODO",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 99,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "expr.left.value + expr.right.value",
                      "placeholder_text": "TODO",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val num \u003d Num(1)\n        val sum \u003d Sum(Num(2), Num(3))\n\n        Assert.assertTrue(eval(num) \u003d\u003d 1)\n        Assert.assertTrue(eval(sum) \u003d\u003d 5)\n    }\n}"
          },
          "task_texts": {
            "task": "# Smart Cast\n\nIn many cases, one does not need to use explicit cast operators in Kotlin, because the compiler tracks the is-checks and explicit casts for immutable values and inserts (safe) casts automatically when needed:\n```\nfun demo(x: Any) {\n    if (x is String) {\n        print(x.length) // x is automatically cast to String\n    }\n}\n```\nThe compiler is smart enough to know a cast to be safe if a negative check leads to a return:\n```\nif (x !is String) return\nprint(x.length) // x is automatically cast to String\n```\nor in the right-hand side of \u0026\u0026 and ||:\n```\n// x is automatically cast to string on the right-hand side of `||`\nif (x !is String || x.length \u003d\u003d 0) return\n\n// x is automatically cast to string on the right-hand side of `\u0026\u0026`\nif (x is String \u0026\u0026 x.length \u003e 0) {\n    print(x.length) // x is automatically cast to String\n}\n```\nSuch smart casts work for when-expressions and while-loops as well:\n```\nwhen (x) {\n    is Int -\u003e print(x + 1)\n    is String -\u003e print(x.length + 1)\n    is IntArray -\u003e print(x.sum())\n}\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "Extensions",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "/**\n * This extension takes a list of strings and filters out any empty strings.\n */\nfun List\u003cString\u003e.removeEmpty() \u003d this.filter { !it.isEmpty() }\n\n// Create a \"wordCount\" Extension for the String class. The method name is case sensitive.\n// For now, let\u0027s use split(\" \", \".\", \",\") to determine the words in a string.\n// Also, use the \"removeEmpty\" extension to remove any blank elements.\nImplement the WordCount Extension here",
              "placeholders": [
                {
                  "offset": 390,
                  "length": 38,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "fun String.WordCount(str : String) : Int { ... }",
                        "Use str.split(\" \", \".\", \",\") to get an array of words. You\u0027ll need to use another method to remove potential empty elements... and another to the count... hint...",
                        "this.split(\" \", \".\", \",\").removeEmpty().count()"
                      ],
                      "possible_answer": "fun String.wordCount() : Int{\n    return this.split(\" \", \".\", \",\").removeEmpty().count()\n}",
                      "placeholder_text": "Implement the WordCount Extension here",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val testString \u003d \"This is a test of the emergency broadcast system\"\n        Assert.assertTrue(testString.wordCount() \u003d\u003d 9)\n\n        val testString2 \u003d \"I, am not, grammatically correct.\"\n        Assert.assertTrue(testString2.wordCount() \u003d\u003d 5)\n    }\n}"
          },
          "task_texts": {
            "task": "# Extensions\nKotlin, similar to C# and Gosu, provides the ability to extend a class with new functionality without having to inherit from the class or use any type of design pattern such as Decorator. This is done via special declarations called extensions. Kotlin supports extension functions and extension properties.\n\nTo declare an extension function, we need to prefix its name with a receiver type, i.e. the type being extended. The following adds a swap function to MutableList\u0026lt;Int\u0026gt;:\n```\nfun MutableList\u0026lt;Int\u0026gt;.swap(index1: Int, index2: Int) {\n    val tmp \u003d this[index1] // \u0027this\u0027 corresponds to the list\n    this[index1] \u003d this[index2]\n    this[index2] \u003d tmp\n}\n```\n\nThe this keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). Now, we can call such a function on any MutableList\u003cInt\u003e:\n```\nval l \u003d mutableListOf(1, 2, 3)\nl.swap(0, 2) // \u0027this\u0027 inside \u0027swap()\u0027 will hold the value of \u0027l\u0027\n```\n\n"
          },
          "task_type": "edu"
        },
        {
          "name": "Destructuring Classes",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)\n\nfun isLeapDay(date: MyDate): Boolean {\n\n\tDestructure the date passed in into year, month, and dayOfMonth variables.\n\n\t// 29 February of a leap year\n\treturn year % 4 \u003d\u003d 0 \u0026\u0026 month \u003d\u003d 2 \u0026\u0026 dayOfMonth \u003d\u003d 29\n}\n",
              "placeholders": [
                {
                  "offset": 112,
                  "length": 74,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "val (something, something, something \u003d date"
                      ],
                      "possible_answer": "val (year, month, dayOfMonth) \u003d date",
                      "placeholder_text": "Destructure the date passed in into year, month, and dayOfMonth variables.",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n\t\tval nonleapDate \u003d MyDate(2017, 12, 23)\n\t\tval leapDate \u003d MyDate(2020, 2, 29)\n\t\tAssert.assertTrue(isLeapDay(leapDate))\n\t\tAssert.assertFalse(isLeapDay(nonleapDate))\n    }\n}\n"
          },
          "task_texts": {
            "task": "# Destructuring Declarations\nSometimes it is convenient to destructure an object into a number of variables, for example:\n```\nval (name, age) \u003d person \n```\nThis syntax is called a destructuring declaration. A destructuring declaration creates multiple variables at once. We have declared two new variables: name and age, and can use them independently:\n```\nprintln(name)\nprintln(age)\n```"
          },
          "task_type": "edu"
        }
      ]
    },
    {
      "id": 0,
      "title": "Collections",
      "task_list": [
        {
          "name": "Introduction",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun listTest(){\n\tval strings \u003d listOf(\"first\", \"second\", \"fourteenth\")\n\tprintln(Print the last item in the strings list)\n}\n\nfun setTest(){\n\tval numbers \u003d setOf(1, 14, 2)\n\tprintln(print the max numer in the set of numbers)\n}\n\nfun sumTest(arr : List\u003cInt\u003e) : Int{\n\treturn Return the sum of the list\n}\n",
              "placeholders": [
                {
                  "offset": 80,
                  "length": 39,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "strings.last()",
                      "placeholder_text": "Print the last item in the strings list",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 179,
                  "length": 41,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "numbers.max()",
                      "placeholder_text": "print the max numer in the set of numbers",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 269,
                  "length": 26,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "arr.sum()",
                      "placeholder_text": "Return the sum of the list",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n\tprivate val outContent \u003d ByteArrayOutputStream()\n\tprivate val errContent \u003d ByteArrayOutputStream()\n\n\t@Before\n\tfun setUpStreams() {\n\t\tSystem.setOut(PrintStream(outContent))\n\t\tSystem.setErr(PrintStream(errContent))\n\t}\n\n\t@After\n\tfun cleanUpStreams() {\n\t\tSystem.setOut(null)\n\t\tSystem.setErr(null)\n\t}\n\n\n\t@Test fun testSolution() {\n\n\t\tval strings \u003d listOf(\"first\", \"second\", \"fourteenth\")\n\t\tlistTest()\n\t\tAssert.assertTrue(outContent.toString().contains(strings.last()))\n\n\t\toutContent.reset()\n\n\t\tval numbers \u003d setOf(1, 14, 2)\n\t\tsetTest()\n\t\tAssert.assertTrue(outContent.toString().contains(numbers.max().toString()))\n\n\n\t\tval list \u003d listOf(1, 2, 3, 4, 5)\n\t\tval sumTestResult \u003d sumTest(list)\n\n\t\tAssert.assertTrue(list.sum() \u003d\u003d sumTestResult)\n\t}\n}\n"
          },
          "task_texts": {
            "task": "# Collections: List, Set, Map\n\nUnlike many languages, Kotlin distinguishes between mutable and immutable collections (lists, sets, maps, etc). Precise control over exactly when collections can be edited is useful for eliminating bugs, and for designing good APIs.\n\nIt is important to understand up front the difference between a read-only view of a mutable collection, and an actually immutable collection. Both are easy to create, but the type system doesn\u0027t express the difference, so keeping track of that (if it\u0027s relevant) is up to you.\n\nThe Kotlin `List\u003cout T\u003e` type is an interface that provides read-only operations like size, get and so on. Like in Java, it inherits from `Collection\u003cT\u003e` and that in turn inherits from `Iterable\u003cT\u003e`. Methods that change the list are added by the `MutableList\u003cT\u003e` interface. This pattern holds also for `Set\u003cout T\u003e`/`MutableSet\u003cT\u003e` and `Map\u003cK, out V\u003e`/`MutableMap\u003cK, V\u003e`.\n\n\n```\nval numbers: MutableList\u003cInt\u003e \u003d mutableListOf(1, 2, 3)\nval readOnlyView: List\u003cInt\u003e \u003d numbers\nprintln(numbers)        // prints \"[1, 2, 3]\"\nnumbers.add(4)\nprintln(readOnlyView)   // prints \"[1, 2, 3, 4]\"\nreadOnlyView.clear()    // -\u003e does not compile\n\nval strings \u003d hashSetOf(\"a\", \"b\", \"c\", \"c\")\nassert(strings.size \u003d\u003d 3)\n```\n\nKotlin does not have dedicated syntax constructs for creating lists or sets. Use methods from the standard library, such as `listOf()`, `mutableListOf()`, `setOf()`, `mutableSetOf()`. \n\nMap creation in NOT performance-critical code can be accomplished with a simple idiom: `mapOf(a to b, c to d)`.\n\nNote that the readOnlyView variable points to the same list and changes as the underlying list changes. If the only references that exist to a list are of the read-only variety, we can consider the collection fully immutable. A simple way to create such a collection is like this:\n\n```\nval items \u003d listOf(1, 2, 3)\n```\n\nThere are various useful extension methods on lists and sets that are worth being familiar with:\n```\nval items \u003d listOf(1, 2, 3, 4)\nitems.first() \u003d\u003d 1\nitems.last() \u003d\u003d 4\n\nval rwList \u003d mutableListOf(1, 2, 3)\nrwList.requireNoNulls()        // returns [1, 2, 3]\nval item \u003d rwList.firstOrNull()\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "Maps",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "\n// Practice creating a map (in this case with a String key and an Integer value)\n// Combine your map with the map being passed in\nfun mapExample(input : Map\u003cString, Int\u003e) : Map\u003cString, Int\u003e{\n\tvar map \u003d mapOf(\"Ohio\" to 1, \"California\" to 2)\n\n\tvar muteableMap \u003d mutableMapOf\u003cString, Int\u003e()\n\tmuteableMap.putAll(input)\n\tmuteableMap.putAll(map)\n\n\treturn muteableMap\n}\n",
              "placeholders": []
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        var  tempMap \u003d mapOf\u003cString, Int\u003e()\n\t\tvar result \u003d mapExample(tempMap)\n\n\t\tAssert.assertTrue(result.size \u003e 0)\n    }\n}\n"
          },
          "task_texts": {
            "task": "# Maps\n\nMaps associate keys to values. The keys must be unique, but the associated values don\u0027t need to be. That way, each key can be used to uniquely identify the associated value, since the map makes sure that you can\u0027t have duplicate keys in the collection. Behind the scenes, Kotlin uses the Java Map collection to implement its map collection type.\n\n### Using the mapOf() Function\nTo create an immutable or read-only Map collection in Kotlin, we use the mapOf() function. We create a map with this function by giving it a list of pairs—the first value is the key, and the second is the value. Calling this function returns a Kotlin Map interface type. \n```\nval callingCodesMap: Map\u0026lt;Int, String\u0026gt; \u003d mapOf(234 to \"Nigeria\", 1 to \"USA\", 233 to \"Ghana\")\nfor ((key, value) in callingCodesMap) {\n    println(\"$key is the calling code for $value\")\n}\nprint(callingCodesMap[234]) // Nigeria\n```\n\nNote: The word `to` in this line of code isn\u0027t a built-in construct, but rather a method invocation of a special kind called an `infix call`.\n\n`1.to(\"one\")` --\u003e the \"normal\" way to call the `to` function\n\n`1 to \"one\"` --\u003e the \"infix\" function calling the `to` function\n\nRunning the code above will produce the result: \n```\n234 is the calling code for Nigeria\n1 is the calling code for USA\n233 is the calling code for Ghana\n```"
          },
          "task_type": "edu"
        },
        {
          "name": "Range",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "fun testRange(){\n\tval range \u003d Create a range from 1 to 5\n\n\tLoop over the range and use println to print the number\n}\n",
              "placeholders": [
                {
                  "offset": 30,
                  "length": 26,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "1..5",
                      "placeholder_text": "Create a range from 1 to 5",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 59,
                  "length": 55,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "for(n in range){\n\t\tprintln(n)\n\t}",
                      "placeholder_text": "Loop over the range and use println to print the number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.After\nimport org.junit.Assert\nimport org.junit.Before\nimport org.junit.Test\nimport java.io.ByteArrayOutputStream\nimport java.io.PrintStream\n\nclass Test {\n\tprivate val outContent \u003d ByteArrayOutputStream()\n\tprivate val errContent \u003d ByteArrayOutputStream()\n\n\t@Before\n\tfun setUpStreams() {\n\t\tSystem.setOut(PrintStream(outContent))\n\t\tSystem.setErr(PrintStream(errContent))\n\t}\n\n\t@After\n\tfun cleanUpStreams() {\n\t\tSystem.setOut(null)\n\t\tSystem.setErr(null)\n\t}\n\n\n\t@Test fun testSolution() {\n\t\ttestRange()\n\t\tval range \u003d 1..5\n\t\tvar results \u003d outContent.toString().split(\"\\r\\n\").filter { !it.isEmpty() }\n\n\t\tfor(n in range){\n\t\t\tAssert.assertTrue(results.contains(n.toString()))\n\t\t}\n\n\t}\n}\n"
          },
          "task_texts": {
            "task": "# Range\n\nA Range in Kotlin is a unique type that defines a start value and an end value. In other words, it is an interval between a start and an end value. Ranges in Kotlin are closed, meaning that the start value and end value are included in the range. \n\nWe\u0027ll now look at the different ways of creating ranges in Kotlin. \n\n### The .. Operator\n```\nval oneToFive \u003d 1..5\n```\nIn the code above, we have created a closed range. This variable oneToFive will include the following values: 1, 2, 3, 4, 5. We can loop over it using the for loop construct. \n\n```\nfor (n in oneToFive) {\n    print(n)\n}\n```\n\n### The rangeTo() Function\nThe `..` operator can be replaced with the rangeTo() extension function to create a range. For example, we can also do this 1.rangeTo(5) and it would still have the same results as using the .. operator as discussed earlier. \n```\nval oneToFive: IntRange \u003d 1.rangeTo(5)\n```\n\n### The downTo() Function\nThis is another extension function that will create a range starting from a given number down to another one. \n```\nval fiveToOne \u003d 5.downTo(1)\n```\nWe can modify the range using the `step()` function. This will modify the delta between each element in the range. \n```\nval oneToTenStep \u003d 1..10 step 2 // 1, 3, 5, 7, 9\n```\nThe code above will contain odd numbers between 1 and 10. \n\n### The in Operator\nThe `in` operator is used to ascertain whether a value is present in a given range. \n```\nif (5 in 1..10) {\n    print(\"Yes 5 is in the range\") // prints \"Yes 5 is in the range\"\n}\n```\nIn the code above, we checked to see if 5 is in the range 1..10 using the in operator. We can also do the opposite by using !n to check if 5 is not in the range. "
          },
          "task_type": "edu"
        },
        {
          "name": "Higher-Order Function",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "Task.kt": {
              "name": "Task.kt",
              "text": "data class Person(val name: String, val age: Int)\n\nfun findTheOldest(people: List\u003cPerson\u003e) : Person? {\n\treturn Use the maxBy higher-order function to complete this function to find the older person\n}\n",
              "placeholders": [
                {
                  "offset": 111,
                  "length": 86,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Research maxBy",
                        "Rember: \"it\" is the implicit parameter"
                      ],
                      "possible_answer": "people.maxBy { it.age }",
                      "placeholder_text": "Use the maxBy higher-order function to complete this function to find the older person",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "Tests.kt": "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val people \u003d listOf\u003cPerson\u003e(Person(\"Michael\", 21), Person(\"Dave\", 30))\n\n\t\tval oldest \u003d findTheOldest(people)\n\t\tAssert.assertNotNull(oldest)\n\t\tAssert.assertTrue(oldest?.name \u003d\u003d \"Dave\")\n    }\n}\n"
          },
          "task_texts": {
            "task": "# Higher-Order Functions\n\nA higher-order function is a function that takes functions as parameters, or returns a function. \n\nAn example of a higher-order function is map:\n\n```\nfun \u0026lt;T, R\u0026gt; List\u0026lt;T\u0026gt;.map(transform: (T) -\u003e R): List\u0026lt;R\u0026gt; {\n    val result \u003d arrayListOf\u0026lt;R\u0026gt;()\n    for (item in this)\n        result.add(transform(item))\n    return result\n}\n```\n\nThis function can be called as follows:\n```\nval doubled \u003d ints.map { value -\u003e value * 2 }\n```\n\nNote that the parentheses in a call can be omitted entirely if the lambda is the only argument to that call.\n\n### it: implicit name of a single parameter\nOne other helpful convention is that if a function literal has only one parameter, its declaration may be omitted (along with the -\u003e), and its name will be it:\n```\nints.map { it * 2 }\n```\n\nThese conventions allow to write LINQ-style code:\n```\nstrings.filter { it.length \u003d\u003d 5 }.sortedBy { it }.map { it.toUpperCase() }\n```"
          },
          "task_type": "edu"
        }
      ]
    },
    {
      "id": 0,
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "position": 0,
          "task_files": {},
          "test_files": {
            "codemash_kotlin_course.zip": "PK\u0003\u0004\u0014\u0000\b\b\b\u0000Y�–K\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000course.jsonì}gWTÙ¶ö÷÷W”i\fP,)rø`@0‹\u0019C\u0019*ì‚’¢\n«\n\u0010\u0015S\u001b:\u0018ºAÛ„6¨€\u0001PD”Ì\u0018kŽê/þ‹þ\u0003ï_xŸ¹æÚ»ª\u0000íÓ}ì{úÜ·ûÞƒ°Ã\nsÍðÌ°Ö\u003eû\\®¥\u0011+‘ˆE\u0013K+\\Gð§ËuVÿÄ�p\u0010×òóì?“ádÄÂ•¥[¢Éx,Ø\u0012H†cÑ¥éÛ¾DãñH8‘t\u001aÊlL?\u0012õ5é\u00066[‘H,ÏU\u0017‹G‚N\u0003ú‰DÒj\u000e\u0007Žg÷¬ï4Ç\u0012aÝáü\u001bºßP\u0018³À­Ìîpo\u001fî¹\u001b“\u000bndŒÅ~$oþ\u0003Ië4¿¸4Ô\u0012u5ùÂÑ\u001c_¼\u003eQáZ\u001f�ûÚ½-ùù…�½Éx8Z¯·rÏz£üZ3.%#Ñœ]ü¯+\u0011k²’\rxÈ\u0015kIº\u001a¬¸•ë�v,ì«9â\u000bX\r±HÐŠ\u0027²È·\u0018\u0019�·b¡PÂâ1\u0016\u0015ÎoQß�XÑúd\u0003î\u0017\u0014-z?Ñâ×Ä\u000bGC±…Äs\u001eËÿì-ÜÄä’‹\u000fÙyd¯¯\u003dM\b·ÛíòEÛõïy®¸å‹DÚÝ\u000b\b’ñvU¬%\u0012tù-W{¬%îâUs»œk^a%á$·w©k‹+Ø\u0012�ÆÜ®¥Ÿiñèçºb\u0006K„ý\u0011ë¸/šh³â¼ôYÍ{—~v˜™ëwÜæ›ÏqÀç[ið%Ž‡âÂ—Éx‹õÙ\u0007£–\u0015Äª%¬xÒî.ä‹$¬EŸïXäêÂkó¯\u001cý?Ÿ»Û‘-}V\"ùYéÃ½„ˆßÒpSs,žtÅâõî“-ÑpÒ½\u003e”´âÞèÂë\tžÖ\"76X¡XÜZä\u0006wã\\\u003eékõ¹Ã1÷†ö¤¥Eµ¶%ÙÜ’„¨Z¾¦\u0005Oé5²ïy£�ˆ/‘pq{®³ü7Ï\u0002\u0002ÝêKZ®V_„—°*\u0016MZXW-õA×¢Ýää.|ÕŠÇÿÕWååuö|ù\u000fÖA\u0010õýÍòT\"\u0027×eô\rÿ··\u001dj³É�\u0007ÐTNÆœrÒ\u0003ÎÍ]ìùêx\u003cëùô(íç;œñ˜\u0005³‡\u0013ˆX¾è¿4 hK$òÙÞ3nê®Lgz\r¸\u001bæ¯½±H\u000b«~é$Ý’ÑÊLÂPŽ\u0017Òš››y[8ÉíÓÿìŒ%w¢«\fŠ¸“1Qà9™´Ézi\u001f„pñ7Üø\u0017‹åZb\u0016S÷îL£céçå…\u0015.Ëì\"òÂ÷XVêâap\rÿå\nZ‰@\u003cÜÌ³×ÊÃÕ’`]Òä‹7\u0006cmQH�«!Ù\u0014ù½þÚ›µ­³‚-é\u00273ž[ÔHo�Å\u001aóÐSž+\u001asiÉXò··ÕkÖ¸ªÀ�L½\u0006‹ùGc\u0014¬N¢¥\tÖ!ÙàK‚®�VÂ•l‹¹À÷V½\u0015w5ûXé‚»\u00130MA—/\u0018LðûM®d¬\u001eÊ›¹~£\u0005\nÄ?Óì¢Zýßµée%_¶é…žÿ¤M×\n©¥)ç´«Â\u00058˜çj—_råŸ/\u0019ôßyÕå�\u001aM\u0012·’-ñ¨¨Ë€cG\u0005nÍ“±Ìÿþ�…ÿ�ÁÌ\u001fËi×*Wûb\b.ÝÇ\"Hà�3Oz)þ¿‚\u0004Ÿ3ýbáçÛgnðK†Âît¡Jç\u0015ÏÏs\u0015ä\u001a[l”xÁ\u0017í\u0000¿äYøRáï¾T°ð¥¢¯f+–¹j\fG%\\L¢ýÑH¸Ñrm\u0005ÀÉsµY®€\u000f\f\u000e‚FÚaK„\r}i\u0026l\u000b\u0027\u001b\u0018—â!\u000bÔ�iã¢©ìvíŒ¹š\u0000@\\‰¤/\u0019\u000e¸@ØH8Ù.w­Ä\u0012î,Ýu8êÚ\u0016KFð\u000f÷`z\n\u001akeøÞÕhµ·ÅâA·k\u001f.\u0018‰bÓä\n\u0027ðJ4–Ä\u001b\u003eF\u0019ú�´Vv{£\u0027NœðF¹�`¬\u0005\u0012œsZ¤T4F¶Œ\u0016¸VºNƒ®æ%Ñ\u0017x\u000e�¢\u001fë´\u000fÄ°4m\u001a|­YÔ8!�ŸÈ´\u0013 Œm\u0026|˜f’›+(M¤G§M†t-æ\u0003#r\u000b’©‚sÃó\u000f9djIXÚ´@–}Am\"\u0001\r}ÍÍñ˜/ÐPÁïè13`Œ[‰–ˆ\u0003\u0016Í´™CeV\u000eí³¬—¦}(\u001cuH¿Ë—\b 1ÐÖÇ\u000fç¹ÂnøOlO+4éÝx\"ëõ„Åí%�\u0006\u0002±¦\u0026\u001f¸¡\u001a\u0003Ì˜tS\u000bÄ\u000e\u000e˜uº9\u0012\u000e„“`/n.X‘±TÍ1(Y ³hK“ßŠ\u001býŠ\u0017bQ`)£e±tð\bíÕú+`ÌzÌ\u001d:ÖÕ\u0006/4\u0019sµilå¬È\u0003¢ÙcÉ ™ol«áð,$\u000eôt�Ï`\u00137Æ¢ÂŸIW \u00010Èíª5÷ðÐb~ö¿\u001dx(ø�ÀCéß\u0002¤Ø¶Ý0�‘)0Þ×Å\u0010‹w£1Ã\u001f\u0004\ft\u001dÓTù\u0007/üƒ\u0017þU¼�\u0003ÝŸÔ³È4å@\fy.°B,Ï(xX¢\u0004ì\u0001Ûv\u0017Û„ˆaÅ¶†Xb�\u001d‡H[q˜~·F#Õ�‰Ï\u001ao[@ŒÁþ‹ôÿ\u0001_\u003cìó3sýÝU½\u0013h¶cÉÐýÎè5�óg@+ ‘¦–$ßså´úâÙüâ]Új^tÂ\u0012üLS»Ä/àÜ˜_2Â\u0017ò˜óˆs§\u0026\u0016ã›Î�6\u0000/Â\u0014µë\u00111ŸÌ\u001fV¸)c`‘…\u0003‹´`T\u001c¹€§\u001e\\Í\nÍ\u0019b$ýògGºÁ\u0017·\u0007‹ÑÌ\u003eã±3è…\u001f\u0011\u0007rõjÀN0h›Ž\u001d\u0007|€bàgÀ›f¬hœãs±xÆ,\u0019¢jžŽ…ð˜MM{\u0015l.‡\fX°ÁIá|°�/\u0012\u003ec\u00053¦c\u001eÜÇMÙüžÙ\r_�[§ZÂNkÑXFSqn\u0019ð°5\u001c´‚\u0010H¡\u003d¨œ\b×G›8šèð…t”î:`\u003cXþ;`÷]èôì\\*úc4BgrƒÇáÐ¥ÍÇÃ´ZÃ±–\u0004° Œ�Gó/$;þÛìÄ—ô·WFÂ€ÛÅ^—Åk„•\rÅÄ©a\u001dâ]š§móWÔéŽšÐŽ‡\u0004L’ñ˜\u001d-Ù\t×ª‚Y:nÙþ\u000b£bí›ÅÒã4£\u0004\u0003pËn×V\u0006ù,¤zè�XÐÒ\u000eN\u0000ˆ¿Ñ QÀ\u0013þ]ÏŠ¹3\u00193Ý¯ÉìŸGµ/Ãûr%\u001abm\t\u0017~pÿŽ_\u001a\rfp¾Ã[\t1%ëµE²\u003dZËšÿ¶Q\u0003kÒÚÇi€MW£öNÝY.–Ï\u0004œD\u000e\u003c¶\u003e±‚aŽ ¦eLžö§í•~ò\u0004Þ\u003d±ÀîÉ³\"{\\ÂÁŠŽ¤šUF\u0013¶lg\rIÏâ¯0˜\u003càÿ\u000ec\u0019ŠÅ´­ü_©eìN×¬ÙW»±¶\"CJu\"”_Ð±Ã¯¡�4òÿjêÈ\u001b]æÚàK„\u0003š÷¡’–-síÔ1\u0000ün¢D†á%\u0018\u0012ŠE\"±6ÖFþ–p$¹:,p2\u0001±að‰1ó\u003d\t#\u0000µj\r…ÿçx•Å*€ƒ]¹vä�ûô\u00267À\u0026·…ƒÉ\u0006vŠ\u0019tz“%E@¹‘˜/éM\u0016Â\u0004ogí¤/²•Lò\føòÞ\u0006,ž7é)ñF9AçM–9\u0011\u0017†\u0004!n\u0000£YÝ\u001cãì®\f\u0013êÇ�¹ŸéÞå*)r™þuO.§Y\u001dY‘É‰6�\u000f‡•�4ãïtäH‡¤\u0002±h+ÖÖ\u0015ŠÇš´ÛŸù\u001a\bá“X‡\u001eL2ÆãÏÉ…­‰a†ò\u000bOZ~Ó#‘_e„ò{Uƒ/.¿iBääžÈÐ—Mí\u0019ê²¼¬Ô¾Ê­Ú—õ3n»\u0027g’`�\r±\u0018§\f\u0013BHó—ÑŸNô0,\u001c‘€\u001aÐP2ª\u0017×íÚ\u0002.ÖÈÑÆ;VXGuØŽ2”Ô\u001c,�Å\u0018\bç\u0013¢\u0005Ã‰“v $çÜ9Ì\u000b\u0014L_Ñ¶°D~â\u001eÛŸ¨Uï“›Krí®Ð\u001e\u0004\u0006f\u0001$wù3Æ�Ès�d\u0013éD\\ÝYÄb\u0011´§i¨ÃÃµo×ð�çÝ×ÓÈ$š ZÐÌüb�) ³\\A\u001dÀµi!Þ•ëT\u000b¬}‚‰‚Wš�\u000bn\u000e�ú‚\u0012udfaŽÊsY‰€\u000f+\u0010Àºû\u0002:\nhzhIØÍgµ›\u003dÅù {Ÿ\u0011MŸ\u00198\u0003u�ýÖ½|þé„ÜÑÝE­6ñ/½ ÁR[¬bfÊé‡µD$šÁQ°ý‘¤ž*¿§¹F3\u0011ôd\u0000\"\u001b6á^\rZ3IR‘9\u0017Ó„Œq»n\u0027Ó9ZšÖ³ö°Cá¸^ü¨µð^Â\u0002§\u0005?s\u0013\n,\u001e4s4mc\u001cx€\u0017Ý\u000e£³c•hif[’°§Ì‘èxs,\",Š\u0015¶IaA¹ûô\";4�º,èàtà“UkÐ\u0015l‡……fN\u0018v\u0002\u0011£,\u0014\u0001¼\u001d5!â¶†04\u0012»\u0001LaC8G\u0012÷ë°ðüŽ\u001dd\u0026!¥\fìÅRe‚\b\u0026SÀŠÊ40\u000f�\u0005\u0002±–hrƒ/â‹\u0006ÒîR~¾\u0001`¾hã\u000e4ã«·ÒKsˆ�¡y\u0011OÈ›\u0018ûòìÆ€N\u0001¤\u003e÷°î‚—à¯AT\\x \u0011é\u0007´òFAªýÆÃ³\"­ �èTV)1;à“ï\n‡DÌ\fo\u0002f`ž\u0012èÁµíVt¯/då$l\u000f~mn\u0016ÜfTÃ«ï \u001f\u003clWW¸æ\u0015Óe4ç]êó\u0007¤Òã3OèŠ’¿¤Ì®¼øËÑîÿ�*»?\u0014˜N¬uËØ\\kÁC,\u0004ÍËóO˜ù¿¤R�çðO�Úß¶Nm¾zû“%jé×x¡¸Ñ\u003d:Gì\u0000•t)\\!{uÞ¥ùNô×~+žýÆâµm‰æH8É\u0005uÞ¸Æ`\u0019m˜÷Ý�#N\u0003ŸåØgf\r\u001c\u0013Ç5ï?7øC;9g\u0017qQ3¦á\u0006\u000eIú ,rÂXV»¥¯\u0011\u001eË6À6Æ²CaÚ\u0005IèÕÖÈ)ÌP\u001fÈÇŠ„›ÂQíîiC\u0017ôE¹\f \u0016Ò†\u000e¤\bÁý\u0006‚Hˆ?Æñ1Iœ¸\u001a£\\›ç\u0013_F{;áH„!ÛFxº¾¸kG8ÁÕ\u0005\u001aýpf/\u0026–´)–Hê„;gõÃI(Êˆ\u0006³M¾h;{ÌõÐ¸M\u003c\u001a\u0000—ú\u0016À À®0TAK�/JÉGØ¸Š\u001c¶\u000e\u0004\u0018tá–ÏÕdiGQ\u0007³³GŸgÖTðå‚ÛÀn\u0001K×\u001fj\u0007‚;‘\u0010a›]ƒ­QÂ©\u0016¨�\bk\rÝ\u0005\u0013|WLÃÕjû}Æ«;wUëàC‚�Kw\u001aî~q)€9ì¥°\u0016mÙ~[Üb@\u003c^\nã\fF# �1�\u0012ÑNð\u00101\u0010û­\u0026àc¿\u000eQ®v­�:\u0015\rx\u0018tÐ~R\u003cÖ¶h¿9¹•üÒ~�HÍ\u001a.Y’\u0006K|³ú4Þà*\u000fM9\u001dCeÿ^�$\béÑ-dEf¹Ò\r¼–ôñÚ\u00021ƒW°\u0010íâ\u001cÅáŸÆ5Iœ\b¢ñW�½acÒ9\bY%t\u001a\u0016Ö×kËíÁ^\u0007xtá„øxÜ_›Þš \u0017d‹í‹çIˆ(cEàN3›´„\u0013\r ¢ßJ¶YV4S\u000e$H�‘0˜\u0010FÒŠS\u000f ý\\®v\n’:}è¼Â1ªœh,ºzžpåº]5\u0018­S·ãc\u001a´°\u00149É\u0007\u0026\u003d\u000fÓø—vkÎ 2\u000bkâ\u001cõ�ïˆjHé�úì+z\bœ#Ñ™\u000f!°I\u0010Ù± ø0\u001c´Ò�¦½Ÿt‰•38Ÿàbý»@å\u003c]„‚Eµ�qEÆèü\u000e\\^0\u003cÿüáÅ\u001a3B\u0005Ë\\U\u001c‹×õF —~\u0026¬};qù¡öjØaÍãø¡\u001elFíŽ„ñ\u0001èý6Ž—p\b¼Ã`DDœ\u000bfcÍ\u0012W±‹„\"í™.´�êãvrüŽYÐ–Óå·¡¨\u0005ôçZíqF®}2ã.Kûé PÈ\u0012)´%*M¹µn»g¿\rríH\u0001³½]�åôêL\r|‘žž\u0026’\u000e™µ…íð‘�ô3Õb¶ãÊ/Ã{YkJ»˜ÞÕÚ5ª5cóFë8¶Ÿ.+[Èø®x:�\u0001¥ã]ŠQÅ³G¥]m¬‘3(}E«\u0004G6$\u000evÚ»4‹øYÎÕ\u001fX�õ‘˜\u001dy‘,\u000f‹\u0019\u0014m8´:\u003dû\u003c!‡\u001d{sj\u0002œ×ª³ÜÄŒuªX”Cü™ž‰3”-¢B3ˆ®Õ¯åŠX!mXðp\u0016µ\u0016qPí•Ï\u0026b8éÜX¼‡x¸¾!É5�I£’œ‹«Y\u0006\\‰pÐšÇ\r\u0016¯ƒ\u000eÂi#c¼a\u001ejÆ+FšÜ6Ïì\u0013\u0013‘f\u001aÍr:\u001e”fþ�XÊÕ‘X+\u001cÕ\nÝ.\u0026-«/ØIÛS{Î9K8X)±a\u000e¸´\u001b\u0016Ñ�\u0016‡m4c‹â�söMk\u0000Û6›ÑË{ö ]uÂ¬R~æ_²$Ï¼Ïæ?¬µ´\u000e\u0005øæófŒ¥-Çr×»óœP ®Tkq\u0014y®\u000ePjÓŠ\u001e\u0018\u0017djŸÅ™fÉ’ù¢ÞÂ\b(¤5Z›/š4M¥Uœ\u0016Ef\u0005NœóE}�é’hÔd\u0006c¤Õ L\u000f—‚1KØÌ×ÜlA)s‰¬±ï~ÌÏý×„‰4B€a\u0011óû·\u000f\u0013UÅšÛ5Iô¸«4²ù+6Bä9èR°øÞÇÿ\\ÔE\\ó]˜,\u0010\"3°TÛî5¶_\u0007:ë-)�úc1™•âé\tü\u0015¦ùkò¯\fÊšõbÚzÈ,­$WÙÑöüþ¶3iá+V|ˆ#f+\u000b¨�XDÐ;PY$|rÍúh0\u001e\u000b\u0007Ávð\u000ecÚçði8ÇÉ€XD+?ÝFÐjµ\"lJ`hæ5jLŠ\u0015—\n\f�¬ôËMº4žu§/¡“\u000bvbò¤ãäàb£ÝJP\u003cÝ}\\)\u0016`(\u0013ò5…#a\u0010Vã\u0007ÖÏ°\b¾\u0004£\u000fÃáé”°¬ZŽÎñjýÜìK$µ;cL·Î„3Ã¤“\tÍ-~¨tW¦$Î\u000f“…Âì”\u0019ÓÄ\u0012Z¹Ø}ÎñBX+�Í Ò°á€Œ·óìG³x‡-¥›o;È\u003dÝ‘s?#�!]\u0019\u0016ÉêÑtUo%w¢‰l\u000e5V8£íùoóØðêúúÅßÌêöß¨Ä7¿‰¤›·~÷0\u0001Ž?ÅÁS5Xï?u˜\u0000Pcµ\u0003ÌþöVS\u0027Wªl�­¡”SËŸÞ-\u0003L“\u0006›’#iò�Îñ™\nsv\u0001í¢±ú×ì–.^ºÿ·Mv„C9Æ\u0007Hƒ¦\u00107ÇÿOÖãïaN¿T¦Ä¬íÉg;š],ìÉÿb­¼~-�ŸúÌk_ÃÎfi—yñ1H©É´g8ÊzƒU†¿é\u0013ŸÈ-A\u003eN•°„ÇÅË‚\u0005ãè`¼\u003dÃ™s\"6®µüdÔU¡Y97Ï©¼�Åƒaý\u0012\u0006Ð\u0016‹7r)BTL¢\u000e~Ä´-Ô–�\u000b\u00103¶šµHò\\Gš@\u003eÇîà\u0012‡\fŒ\u0000\u0005X€2nûyÞh©.lG\u000fœ\u0016L�qÆËZú\fCdv�µ�w\u0017Þók«ãÒ}¬Ï\nº˜ÚŒô£ó;²ÅÜ\t\u0027±\u0017\u0019÷E\u0003\ré’y$\u0016hLØ¾+\\t\u0000ˆy¾|Ú÷ÕákýFVuÈçG�™ª\u0006\u0026¬jˆqXÓçdM\u0016L|Þ“~çIÿ_¹\rN\u0007§þ‹ì$k‘p¢6\u0018tv‹¤÷S­p\u00158±­|±ŽáDu«\u0015�¿³D\u001eÍR\u000eù™5\u0007L”4M27*Ú[0¸^÷¬\tí™b;\u003dª\u003cYFÍ8¼§Õå]Š«Þ¥nWö£\u003cªEžåËvIQÇ_QªàñüÎÎ¼²Åïÿçì·}O\u0016]\b˜ëZm\u0004Í®ó0dÎ°\u000bfå?ÿ‚Ðú\u000fºÚÍ‚ÿ\u0003-þ)¨ø§ âß/¨\u0000}rÂŒw\u003c.·\u001bx/?7c\füß\"Ê\u003dœ›ýÈŸ,½àÿàj\u0018­\u0013ÎÍšþ¢mÿþ!BóvÈ\u0019…•Ýì¼º\n\u0006\u0014_½ãùª5‹\rìÿ2\u001aäÚüdf9ËW,Ù˜‡W¼Q½s\u0026niemòƒmád !�œ\u0001ÝªVëZl§\u003eÂ-ç\u003eXr\u0004†f­X¼‰áy$\u0016\u0003nÖO3h6XOw’sÚYTO¶\u003d�59\u003dÏ×p\bVð{�\u00168�J\u0002Î\u003c}–3¹\u0026ïd°jš é¦Ø[0uÞ\u001eø\rñŒæ:2\u000e»�\u00194ù’\u001a\u0000‡9\u001d\u0014¯oÑÛF|õ\\[“ä¼u\u001a\"\u0027¬S-¼¿‚�ásµà—ˆ$\u001bå�töX×4û’áD(Ì{{u/™…âfh¾yî\u0010\u0027y|Rà\r}ÈÃp³G%\u001b\u0026õ‹óßÈËÆâ’\u00076ýÚ£’(bbá“œ/ãé¥›[¬»ô`2:ÓU!aÌ¶5\u001clñePˆÓùázPœç�³Õ©÷—Ðe(Ïeqi“M/!‰ñ ì|R\"�W[0ä\u0005ÎH4Í\u0007î\\{Û‰89ÒGVê\u0011ÞH4–® ’£.æ/ž9Ù#½| ‰l\\ýâ\"Ìë´\t“a9kÏ\u0003£ð™¡N¾Xo\u000eå©ó®\u001e“?åeÈ¨»I\u0018J\u0006x‰ìÄñ‚qJ\u0001JH\nžä¥Dƒ]g$µ\bA§ºŸÃªm¾v\u0019ëÂ)KY\u000f�Ï¯ÏCÑ\u003dúä\u003c“ŠÏˆ;Ç ~OŒó™§?«\u0005²DÛnÁÉCëÇÒ²jÒ«z—mÜ\u001fNÆÙ§Ï¬•Ïá\u001c¤Î.ëÂ\u001d\u001fpu./Ö‚Ù~f\u003eÍ¾xÂâÍ?‰Ü\u0005ƒJð‰?1Þ‚uúË£O¤Ó¡ò†yá¯óU·ÇbÍÿ2yÙ�\u0018çÁ2h1;\u0011ù\u0011�µ6\u0026hamæž\u0016»”gšÚ7ýû®ödCÌüÎ¹\u000eMbo´ÊÞô\u0002{Õ,’¥×Å\u0016\u003emˆ\u0013ieb:Õ½ý\u0015~eÙâa_Ç­,Y\u003c[û?uà\u000bãB];\u0018uh‘ûUÎxáëœ2[Øü\u003cc\r—“\u001fù£™Ýc™ÿq*ÿq*ÿq*ÿ}§2Sk/RRÿ‡Ô¶Ýf–}ø·Ï¦ýŠ\u0005üÙ\u003eÝ¿\\ÎÿÅRþ´×õ—\u0015òkd`@q:…’‘à`\u001d­uhzKqKúDD�Ç\u0005#§\u0007;/©“nÁ€c®µN²‹iézµ–ú\u0006Wœw\u0002pF�¹#Á‡ä6ËFÇDÌ%µØíæt\rÑäf¯;o�LŠ³š›QüžÑ¥ô“p:úý†Ü\u0002$¥xœ«ü|‘F—ÏÏ\u0015k‹Ž’wkÆ�T\u0011Ö.Ì�pyœ®\u001aæ35\u0018\\·c\u0001O³½Y„ agãl–E\fÄ\"\u0011K\u0027²\u001dé…gë�\u0005Û¹\u001dnã?P\\ ‡Uþ©º\u00029Â@·ð·Ç¢és�}®*¸¨p�ã¦üÅø\u003d^Ý\u0018$\u001aLÔ\f‰mw°¥ó¼žªk³\u003eSBr$é\u00036¸·ùÏÇü\u0027±Þó�maöá\u001a•ŒŽ²·j\u0006Ìûº0æ/Ù§Yü{%ƒ‹\u001f­ü?\u0004ReYl*æ¸Öâ?×çñâÂ78õšYS˜¹Oýë Ý?ÔáŸ\u0001º‹ðÜß\u0014Æ.ììwö\bÿŽƒT¼ø\u001eâÿ\\ÞM\u001fWd/‡YXgå\u001dÌ’%´éõß\u0011\u000e4ø¬È\u001fý4ÆŸÔ$S\u0016ùÇÓùÇÓù/ðtìv´Qÿ_ñ�\fsÌ”Ž‹\u0018¤g€©°ã–hk,\u001cÐ…7\u001dÎ–\u0011Ëà\"Ùª\u0027{ûÌ6K\u0027À\"OH]oúï\u0006Ë\u0007%æÊI4[�p¨]ïiIš\u003d«éC¸å\r°p\u0013Gs37\\ZÉ€;×©B’6\u0019\u001eç¹\u0012-qàýh�S\u001cx§%\u001eiç\u0018o€\u0013X\u001bbf‹•éÞ~_\u0003k\u000e©Ë¾!_¤ÒÞÄcFëÓÎ‘t�Ù¤�¤ˆ5ñ\u0016­`ºjZÞ«njfÌ–\u003e‚¨*\u003d\u0005�w½i\u003eí\u000e8ûl|‹ÎZ»\\Q}H“\u001c\u0027¯·úÍ{*!{ï\u0016{?¬ÏZOf/�Ð¢‚ÝÕz\u000eN§O�O/\u001d»aA‡:ó—)×�5kS$žÑqŽ\u003eÞgg\u0006ìÉÍd$³Wm±\u0011;ár¡J\u0014Ë\u0014µ\u000f`×ç2µ†a„å4ý¦X0\u001c\n;l“ÙŒ9-ÞrU,2ìß\u0019êç(\u001bÐÃr\u0019g]\u000fT6NoÉÞZ¬cþöYXlÍu\u000e\u0026ó\u0004C»ÂNN\u000eb¦lŽ[¡ðéÌ\u001d‚ü¼\u003d§ìI8h#:\u0006,íú½\fõ\u0015‰Õ×\u0003‡0Pâ\":\u001bBdî|Ö}J–mùYn´cñ\\©|—ƒåØ Œ°9¯ÈiÌÔc7ÉÖòÏ,xž-\t²É‚OSâ\u003d‡âC/º^lØ\u0016¬Yž‰@-¼\u001aOo\u0018Êð¬3ÎÍ÷Fw´\u0004\u001a²Òbœ\u0026²7J§gg+\u0027g¶Î¹½\u0026«ö\u0019\u003eá¥Ï\u003cm87ëø^}Îo®û¯H\u0005mä}ðÿ\u001d\u003e¸._Ýák\u0014à:Ï\u000bg\u0007œ÷ôÃ\u0001×\u0017x7LÐ|Vé_t´l§\u003cœ°Ÿ¯\u003eÕâ‹äð§jÌ1rgÓù\u0027\u001b°{\u0016`ú\fÔž»ðy»\\2Ý€›7å¤\u0011ƒÙ32¿ýyo\u0015ü\u0027\u003esø\u001fýÊ¡}$²³ÎF×}\u0015‡œ›üƒ;\u0019À^ÿøK×ƒY\u0017ÈðWÄÄi•)ÇA×Y°^RæÃ…\u0004âz›¯ø˜3üùÔyWsK¼™ÿÐ›üäð\ff;Ùû·…?q\u0011Ð\u0005\u0014šXºHˆ+\u0012‚|\u001c‰½ƒÉ§1\r[PûkAé\u0003L5T\rñ™\u0000M\u0016ÔO4\u001cÐ5GàY8{lW\u001c\u0013+½f�Cb\u000e|Å\u001b\\­\"§£\u0018ÅÊæ:¡?ˆ\u0027…,|Ï6º\u0019ÏíOhýúÅÝ¸Y\u0027½:…-¾\u0016,\u0014\u0002)\u003dÞ\u0005çÖÊñ:æ\u0004\u001a]úò‡L¬\u003e d%Ÿ¢\u0003ÙÊÉ]\u0003ñlàí½`¸f_8^É7Ó\u003e•\r…u)›w©ž™\u000eîj\u0015¼5ÖÀßo¨7\u0016\u0015äz—ê\u0006D�§w›åð!Ú~\u000b3økL÷.‡\u0004ÿ\u001d¦{}�YK\f\u0018\u0007\r´G\u0011s™i´WË¹\u0005n;\u0018Å›aªø I\u003c–ˆ¥\u000f�\b˜kéð7Ÿ*Î\u000e\u0013DÏœ¿lµZ`€d8#¶•Ù\u001co*2\u0007èc\u0004n\u0007\u003cf�ÄåXû¸Óiz“ƒ}g‘ö5³;ÇËÈ¡�6I0o¦ƒh\u0027×^¡‚¤\u0004 ›¾ºE/(þ½/\u0017ÿ\u000flSø¼MßïØtøhü\u0005`W8ÈÕ’ì±1o`\u0012â‹ûäà\u001d›Øn×\u0017?€ÈmÙä×nÊWÁ\b9º©ù•Ð\u000b;Ë¾osÎ*§”-]ÍûÇ\u0010Çâ|ó\u000f\u0006ùk\u000f\u0027pL�£\u0016ìS\n²/çd\u0015*e«´…ÚãKØåËoÛmdE\u0018ç¿²˜Ò[È¿ßõçÛ±[ûbÄò_š‰çÏÎ¤à«ÎäËßšú—fRàÌäkÀÌ´y÷F\rÚ\\,(˜\u0006B:Ä—p\"I‹|È(/c\u0007\u003cÛ.;\u0002–\u0015kÈ|$â|R2+Ê\u0002MÄ%´™\u0006r1¯Z\u0007Pì\u0007\u0000Å,+ùÅG\u0002\u0000´¿Ó†/i-8¿-ë‘3áæE›pbu1)\u0007v\u0018MŸ\u0018f\u003eà©\u000f\u0012“z\u0014Ž\u0013K|šOÉ×%îm–|ÛS+|s\\wæç\u0018\u0019ÿ\u0019Êäøäß\n›T¹\u0015\u000b‰6ÿ\u0013”ö»¹\u001c|JfKÆ%¿F­6ùÅY:‡#ìà\u0001·˜•D4C‘khYN­Œ™ÏQ\näÏzYVjþër5;8\u0026/ép…¼›\u0019üÛ¤m”8\u0010b¯Ì—\tB|Ž•)€á\u0002— \u0013%L¯ŠËÙ1bz« $’¬´oï4h¼ ¤\u003eYy¤\"ý€­”õW\"ì\u0007ŽºŽØqžù\r\u001dÏˆ²¦Ÿ—™\u001dqž®×ÃÿüýÄ‚û\u0019~NF\u000fy.iIJ™Ì¯\u0019\u0019\u0006·cTœÏÞ8áuáÁùŸÇr|ºÌhq\u000e¯Á¾azÌøŠœfiþ@PÔöN2jåå(2\u0003Ò\u001dV�\u001fÇ€º‰\u003dT]ìåì�wüÏ\u003c9Í�Ï§çsÙ2–2#\u0011ä\u0016¨kØZo‰\u0010›ªw…›^eÄ™»ÃÃ\t�4qÂpBÿzÞ\u001bå|ø�OzIpV{þnd³\u0014ëçy\u001eóö\u0027e\u001e\u0011)§Hî±¿�¢Gn+•Ïu�ö\u001eå\tÞ¸%x1\u0013Nà*G\u000fj°8æqó\f$Jï%Hdžø®¿•®ý”„½‡\u0006ºIÊëš3¬ƒ±8öwkY?%ìäC¦!\b†ãV€c\u0014\u0019fD\f\u000bÖ%ÖÆNSžì[ÉX\u003d\u0006‡\u001c^µ!¸VNDÞ©˜\u0003ofùñæC\tYoÙÜëœ×è¸ìi�”ñAcÑ³Ž?�¹Bó\u0001•Ñ˜YRàl\t²�Jt¦oÎ5Ê\u001aÛ—V�O$�Ödç†\u0003Á\u003e\u000bþ33Cóç¡© -­½·k\u0001\u0011b¡Ì4Bû_\u0012\u003dØ\u0012\u0005\u001b…“ü…†¿}ø\u0000d0¬êÚÀ_Ù\u0010ÁÉ\u0006\u001d¶_¦#øœ»räÓ»t½|œCÎ®Õ!®åR¬§í•9|#ý\u0005\u0014�\fŽ1LÐ}ò7•Á?\u0026+ì4¤?â�\u000el¤¿ý’á2@)ÆbM‰\u003c\u001b8mæV3\u000e\u0027²ûÉÌ•Ë€l·D¿a\u003eÊ‘#\u000fWH3\u000b\u003eâà]ºü¬~B›ú\u000e�-³¯èatÈhìÍEéNl¢.ÞÏ¼n¤A!ñ_R]è)ÿ�£\u0015\n\u003d³\u0012¯œù1Ï¸PÚ¤\u0014+Ò\\«K2ÿè¡„_d—üÿj¶þ©Ùúwk¶˜ªZ¶ö�ÿ3Ê/ÛE\u0007f~�Êyt\u000f‹ø¼ï¾Ú\u000fÌWÝóÓÍËÓ�i5�Ñ ÑÑ\u000bÛ›§¥ç7¹ˆ‘s:I_xÞd\u0013Îdõhsœ7ò2æ˜\u0015 YÜ(qKö³\u001b‹¾ô\u0007ÏVXœÞY\u0003_ì\\…ìi-j\u0006ÿ\u000e3[tå¿æ\u0019li,È4ÙÀ\u003e[ÈÇ¡\t_–£à|\u00142ÈÉ-\u001fx,×í’ïÆšÇ4®ÕõYæCæátÓz\u0013ŒÞÅî‹›\u0003\u0011‚±ô§å²žl×éAƒ7Ó\u0015t™@Ð\u0007vm¶óŠ¶²Ý¨³‡Aû\u0006›^ý\\:õ¸e~\rß¢UufÓ;\u001f™ª\u003dq\u001e¶.wk‚\u0013™+.xº\u001eJ\u003c_\u001d²É\f±¥‹áÒˆ~AO\t¸ßÛÄ\u0015}U\u003eý9‰¿\u003d¼gÕÌ\u0027.äðÖü\n}(IÖ§ÌÒ‚$ûïù±\u0005ÇÂ€5w¶49›ëåëgó\u001eØûÅ\u0007²6çËÉé[ Gë}‘õæˆ�ô‡I¼K÷Gå#4\u0019Çˆfn\u0003ÔöGÍ$\u0004H§çdó(†©\u0013åÚ_tø4ó‰½æ\t\u003eë¾‚Ÿ—\u003cºf3ýwú…¯,éï€ï¿Û±¤L·$ùþ·œDú‡·Ä”ÿ\u0017.\u0019ó¶¬›k•\u0016\"·|\"â×Rþ/JƒF¡\u003c\r\u0026a\r–™ùãÛ‰ômV_üHAnž~´0û„¯…hH+ÿ(«µ?�\\Ô/%\u0016¼Tü\u0015qQÚŒš\u0012­ô¹9yºæÞ©DgÞá¸\"{ç\u0019\u001f¸\u0002aíÓ³2’wéƒf³\u000eøIÆ}�F\t\u0000‡\u0013«õ\u0017ƒœ¯»¦\u001b”¯—„›ìja\u0013\u0018–ªê„þ@I\u000eØ\u0027×\u003c�]]¥\r(\u000f6]èÎ+\u001f´šb|¶çúh{º.\u003cäÊÑÇbÍ«\u0017çÿäèšÓæk!:|­\u001fÍîLÏ\u001fDÉŒœwÌÛ*bOž÷Jkj[Q½1;)\u001fyã¬€iÅo\u003eX\u0014ÖŸXÓŸ‘nµÌ‡•à\u003e\u0006\u0013ò9\u0016ItØ““I,É˜…Ü÷FÿÜ\u0014\u0004…Æí�íü\u000fØ\u0000æI\u0016H~êU9wÎ\u001eÌ—»0AÿØg[\u003eqîÜ\"3Bû.{\u0016óK\u0004œÉþû}gNË\u0019Ez\u0010Y³Î\u001eŽÅ\u0003É:š÷�\u0012Ýf˜½œ~\u0012.\u0011Þæ³™µ80[¯Î\u003cØ‰ÇÞÖ\u0000ÎZÍûâ¹ÜËÕf¥?{3ÿ\u001c\u0027ùöÔ¼“™NÃ0Ù*(\u003dÓyÏØSÍz\u0014mé`Ì‚‡¡®$hú—\u001díÄŸÃ‹j\u001aüíaÿš•+A±•’(²ìq»’úÛ\u0017\u003e\u0017\u001f\"À¬gI›—TŽÑHèï\u0005±*¶8-h?Á\té•kD¡mÇËšö\u0001ÃDz\u001dàø7ÅZ-�Lœ—¿s\u000eèX\u0002ciò�9¹\u0002ã37ÿ{—rÚ]W�x—º\u001cjk.dÙ±?‘§³\u0003zÏ\u0015\u003cÀ†˜|™Bjlyë\n¿ÅúK\u0012\b5r2D\u001eôXÒNŽêÏ’™cF\\rþ‰[þÉƒ£Áâ\u0011d×²‰\u000f\u0026·ÏÁMÈG\b\u0013ö§¿97¡½ótí|\u0006\u0005Ðn\u0006Õù»Ó|KÓÕ\u001fñE\u001bá\u0010ézJ\u0026ì\u0016§\u0006››©³I�A€¿äÓD…å¿sÒ@aÙô8¬\u0016û\u0013ƒn‡$ü¥lWz“•ø±g¹^â\u000bõ~¦\u0014\u0012¯º¿¼æõ–þ\u0006—\u003eq„…C¯º›¿»î\u001cP’\tE|QÉ\u0016\u001b\u001eL/rs,)§R\u001a\u0011r–\u001aÃÔigó¢I•ê|+ßc¢àß/MD2ñŸ�E¶\fJ!UÎ×9U!c9\u001c!Í1Kp6«ZåO�q±\\Wz8‹ø%Rhœ6ÿñ\\¾Žç¢ïÎ‹–ï3[\u001e|²ŸÄÄç°Zñzý1X\u003cæ\u000bj \"ßfÍ\fÈ/þ‘åE8/\u000bŽ•/ú…iy« \u003d°-y._\u0013û\u0014y.ý9â4*ŠÅ¹~Áý¯Ž¤àóCùš\u003eR\u001apØÇ-åq9]˜÷EB{T-ÓúdS,Ñ’—®\u0016Ñå\u000ef‡.}Xòë¾Ì\u0013u¢VÛ¼m/|™\rƒ¯UGXcvÈ8]ì$ïÃšŠòkw\u003e6ŠNÃõ\u001cyæÚ\u001f{«\r‡‹AU}Ê“Ëfˆ ûu­aXQÞ…ŽUÊH¶:;d\u001c»\tÝk\"ß‰–ffÜL$“±7\u0027šñNfÉ¦ùl—óYÛè\"¯ë\nE[«Ë¾_½/^#\nsú\u00108Ã\u0002œˆ›\u0002/ý�”¤ý±U¿Åô\u0012\"óé´û²¶Öø‚º¾\u0027ÑækNï]AO;ÄÁ´‘”.tão‘ØUn™þãï\u003dëæÖsÂèþ´Ç|bIÿQ�½éV\u000bESs\u00260;\"/\u001deWALœ\u003eMZŠ µH$šcQqþôÑ�\u003c\u0004ÝXÖÛ\u000bZ,8:ÿ©‚ôSMÍ™…Œæ\u000b¢‰ŒšK)q[l±\u0016\u001b“³8æ\u0018–\u001c}’pÔ\u001cä«÷ßë�½ú�¯×€\u000b“¹üµÔ6çƒ¶ú;½f‹˜ÓYLv•Ï#aÀÐ¾ÐZô;ŸMéÇkCü…Ÿ‚\u003cW!TBD–)\u001f\u0017r\u0017¥·™¸�¨ül®¹£¿Vª·´e\u001dÀl@‰üã\u0010ôòÛgö‘iŸ;¢ì�µW\u001dlÉ,óiâ³Þ #þÜùg¿Û˜~úßvÜþuûÌç\u00104ù\u0012\rÇåÃ‚Ç�{â\tË}\u0026Ü¬·›mãeÌ/Ô?‹ø§GÿÌÏ÷úõÿéßS]¿]|òÛÅ®mæÖ×ùé_xÝ\fîd\"\u0016¥!5C/\u000fì£{ô³°\u003dÍÒŒšIõèQ\u0016´xC»rÔ«\u0006ýWñZ@\u003eúpT\u0026\u0010¡\u001fTª÷è®\u003dÞø\u00013¿¥\u0027?];Jw–×¬×Ï\u0014\u00167dô[¬¯ùw©‘õ»…\u0012tý`bŸš\u003d­o”ª‰ÿ;7Cs«i:5®\u0026¨Ÿ\u001eª)õJ\u001aØ!ÂI×Õ´H\u0004\rÐ\f]ÕÒ•_PÍÓ¨+¤{‘Ô,\u003dPƒjLMÑ\u001c]§¾•©žÃêå\u003eïÒÔìJõ*ACt\u003d5î®S\u001fiö·‹o…@¿]¼¯\u0007�¯fiô·‹�éá\u0005Õ¿Œ^ª\u0017¿]ì�¥zJè\nuÑw\u001bsdNÛ7\tihD\u003d¥në‚zEC»Š~»ø`k¥7N}¥ª?†¦i* \u0026y\u003ec\u0007ŠR½9-4´s¹z¶D\rè\u003e\u003d\u001d›V6©±M¿]|øÛÅ^oô,ý\\G\u000f¥}õòÓ5\u001an¦\u000fB4z\u001c+Ãc‡¨gÏù65N?ƒI\u001aiX} ÷©.™@{@�ÄrÑYG\u0015\u003d¬ kújH·V‚)\u0014žª£\u001bú¯�™³§”¦~»Ø½Z½¬¨ë( —ô†ÞIif\u0000\u0004üžzèV²@f\u0019£Ÿ°\u001aC˜^ô¸ôç\t5Òõ:zÙ ¦OWÒ\\«ê“\u0027\u003d«èqªç·‹“^/ºÙN\u000féîÉ\u0015jHn\u001e§izNÝ ðCõŒfU\u000fÝMõ~ºöÛÅ\u001e5\u0018T¯~»\u003cxŽiŸ~j_©ßðèIXj Oÿi\u0005öS\u001f\rÊœhŒÆÔ\u000baÉØ\u0016¬åÓ3ÕtWMÓ½½¿]yŠ¶Äx\u001e[.¯î¤\u001b+R³\tŒŒ\u0006Ô³ß.Þi–\u001e@�mt{m�\u0006 t¼T³jXß\t,¡î(šýA¦\u000bêt¦Æ·\u001dÝb_À³­`Ð\u0001ášå¸ÿ\u0012\u0013Ù˜\u000eäy|qY¼¼º:ïRô“\u0004³¼R\u0013GéV›H™o\u0005õ.W\u001fÕ\u001búV�Ñ%™\u000b(…žy“¸þš^,[-Ã§ñƒX¿\u0013êåf×I}%Hïèú^\fâ\u0000V\u0005ÓQ gûqú\tÜÔ‹ù«¹óø%\u0002ROèÇËôPJÏ©éß.\u003e\u003dp�^í*Ë\u003d‡çv†Ô Ïú‰\u003c…N…¼ù\u0007V[+¨«µÍw¡È¢›g!Hßµ«Y~tŠ\u001eÓ`LV\u0006\u000bz\u001bâ8œšÍƒÌÈ¬V¡\u0007Pñ\u0005½§ÞÃ[éŠz#2SÐX»œºÔðFõŽ®vÈ²\u0014¢Aõ\u001c\rŽQ¯zÏ/¾§«4p\u003e5NOÃt3áScB\u0015ÈÍP»»¹”nÑ½M4-$8ß¶œz�Ñc¼§\u003e¨÷êE\u0014Úè9\u003d*\fº\u0006�ìãÑÞT\u0013ÛÔ\u001b0U\u0007Ý\u0014®\u0017Á¨�‚Ã‚áÝ\tz”h¡QúExßèK\u0012ô[Û¤\u0026*hz÷1ºl¯ma Éw\u0014«u‡EÖK£­{½Þ\u0002ú¸{\u0015ˆIÓj”ûüž¾ÁÚ\rÒ\u0004½\u0013^Qƒ¿vºè\u0015Ý¤¡x\u001dx`œ®Xô\u001eŠbŽ\u001eÑ\u0003á\u00123Óò\u0004\u0016Ÿ/”\u0014íOu•ª\u0001‚~\u00017oÛJýÐ„s\u001eô“§Æ×–nÅB@}uÓ­Ót\u0003º�\u001eÐ7ÞdÍê\u000b4]ë�ç¤XµÕ¬¥‡géIµ\u0026\u0011½Ü®Þˆâi£o0Ö±B\u0011\u0001Ðè-½\u0002\u000fíŒ\u000b·•«!º±Ü\u001b²µ„K\r­XA\u0013x\u0002Š„»ì\u003eO3��Þ¥jFVç(õí¦+˜úÎO¢w\nÖÐ-5°ƒ.Uí\u0010v¢Ë4‘\u001ao¦g¥Fz\u0000\r/æ©~\u001aÆà@ºkô�zÊÄûA\u0016`\u0015+�.zÐNÏÑ©z£FÔ \rî¬¡‹Å\u0004\u001e¾³*¨úxÖßm®¤ÛÇVÉ¢Ö‰ôÑU5¹œúkÕ\u0007¼*¼‡–Omff{-\u0006(Èë\u003e»ûÂQ\u0018ƒ‡ôó!Õ»\u001d#¹\u0005õ1EýÅÔÉ\u001aL3(¨¨\u003eì¡÷ûè•˜Cà0ïá\u00023‹i\u001ajjiW\u0013êµ\u0010\u0016\u0017¾¥;�jìS÷…¢\u001aºD¯Ôó\u0002ÏAðJR½^ë�«IõáPn�š,¤^!\u0014ýrdõ\u0001ê¤»4\\/J4ßOÃ;éR\u0011�ÝK³»r \u0011\u00102üþr£m«\u001e—\u0026HhïKÛwOÑæó`ÿ\u0007í í¤šk$@‰;t÷\u001c´mÝ\u0019šÃÊ•\u001c]¥žo\u0007%Ç?uƒEo\të•\u001d\u0004o‚\u0001„\u0013C+ Z^ï\u0015\u0026”^Œ\u001d±ZÀÒOkÐ\u000e¤1™¡éÊ…SZä�$\rBú/ª¡C\u0005¼„sôF�æ\u0019™\ryC!úp05£ÀN] Ç$õW5«\t\u0003;ú×\u000bU ÿ·EÚ@Û\u003e\u001a¿\u0000Ø«×ñ\u001cÝ è\t¼ÜŸ\u001aoÒ\u0010áR­\u0019C\u0014ö¾KM¬Ä2×Q÷^ÐþUŽ\u0007\u0026ò~\u000e�¤zjÅ´æ{ÎÓ·•ôQõÒ÷kÏ©\u0017 vÕþãtã@^R\r\to\u0004 ,q\u0018†·©^zF?mf›Ñ‡·ý\u0010Ã½L)õÞë]¿6­W\u003d¢4ŠØ$Ð%ÌKÀœÇO“‰í$¸¢\u001c\u0026ªÀMWE\u001eJ\u0018VLÒ�t­z/\u0004\u0017\u003c˜êm¦«\u0002sÖy½ê¥z/\u001d\u0004a\t\u0026×Ñý†åôxE\u001d\u0004óŽá›á\u003cº×²\u001cL\u000bððxó\u0026\u001a\u0001UÎjŒU\u0018dêtª1PëÍI5ª\u0026+„—é;\u0016°Gt\u0017èaMªs£\u001a\tÇ«÷œ^žšÝÌ\u0016g­zæ\rÑÌÆ�«ÔT\u0007�Ð7¬âôêC( …jr FÑ‚L6­L\u003dÂ\u001d…¹¢\fðÄî\u001cõLþPÃ+Ôp@õ¨×í›¡ñ\u0004Ì\fWÁü¿ ë\u0015Ô/fÉ“·\u0003ä8pa“¬P±\u0018—m\u0004;Ý\u000bÍ\u003c$\u003dæ\u0004X*1Ì~V\u0018ýÔ¿òä^¬ÿOa0ä’£,Ð\u0013t\u0011°©\u001bz!(Â\u0001\u0010ÓMo!•ßH“x± w›-Ü%°»ïÖªç;–c€½jNÔ\u0019È‡æ\u0005\u0016–\u001e¡×4žæñÂ`Hä\"Õ¹…í\u001c˜¤â\u0004ý´\u001d-–ï\u000b�K~„Å½x\u0026Ì‹Ò»ì\u0014\u000fÿ\u003d\b\u000eSãÊ�ÖÂ\u0026š9—P/W\u0011\u001aè�€\\!˜¯�¬YŸ€z•†Ù­ÚCÔ}Œ\u001e†]Ÿº1­«˜\u0006�UO�7”\u001f£N5‚Åº\"Ó’ŸŸº[Äz\u0017šÙÃ\u001cPç‰5Q÷\u003e\u0006\b\u001f÷��ÉœC.5z:CvKÔ[H~�š#V¿\u001b…Ÿ\u000fÒ÷\r‡ò\f\u0003j9Üp\u0016ZeÖŒ¬Œ�‡š¨‚éŸ¬ ^VÐ¢g\u000bÕðN¾5dPb1MÄÖ\u0015UJKåEÄæ±ÉH\u0019[¨~m5R³n¡·§\u003cBOS½\u001b¡ëÆ\u000b1Ú¨\u0012ü[ Dgìôˆn\u0014SwQj\u001c*bFPˆ0¡µ’f]ôv\u0017M©�\"G¹êCSéöú 7šê¤�–\u0007dž¦Ç\rÐ o\u0005!Ro‚îy€˜ž^\u0000“\\^{šz¡i±\u0026ý~°ç¬zŸš­V³¹Ò‰?§Åð¾ð§§@õ±†ÿÆþã„‘•ûÀ\"S\"õ\u0005%\u001b½ñU­2‹‚’\u003d\t\u001a,ÛH\u000f·Â\u001a¾WSÒŒ\u000fìûdû9ºsš\u001eÉdýXØ\u000fÇ¡ÉçÚØèv‹•¾€\u00013c¾†:\u001d¦W\u0018Ë:5*+´�¹h¸­F½á\u0011z]2�Ã\"L,òW\nÂàËþ•Ð\u0016o�\r\u0013C3AWëèŽO\b˜¤ËFÉÖªÁmôT$¼9Êð¢\u0017–ñ-¯W7ñÿžz½‡Àó›émuýfõÚ\u0026L©/Õ\u0003�þþÓµOÝµ\")¡UÒ¦�ÍþƒI\fâ¢’ÆËS�©že\u0006f¼¥;U\u0016LÓ�©®%5âÓ….$ÕsØ©™-g•0H\u00190Ô ÔÑh´25sÌˆfÉ)\u0017ý@ßËªWÒ%Õƒ\u0001U´\n›\u0019­S˜â‹©q!J\f6\u0011žÛ–Ô\fÝ^\u0001öoW£AÆŒí\u0015\u0006\u0012]k*)¦¡ýê­˜\u0026O à„\u0000tpá\u0000Óa”.•Ðl\u0003\u003dWã†Ó¿\u0007AØ®)hb�j\u00120WÌZPÍ\u0019s0+f.,ËF77¦ºègf¸·j\u001aZíâ\u0003ê. \u001eß¦å¬Á]\u0018ï†³»Ä¶\u0016‡Ù�¼^\u0006“ôB/D’}Ô×\u0015\r\"�\u0007i¶²�\u003e\u001e…\u0017÷ž\u0006Ïí§±ö¢\rõq^ûë`ê\u001faC»ÀÚß¨÷\u0015ìŠ¼Ýî�\u001eÜ\u0005Ìu\u001dŠxÂ6\u000e Æ\\I%�äÂ©†¯\u00075z?ŸzZÕ\bÝ³hD˜Õg1Ê\u003cu’!\r�§z¶ª±\u0026†¡ð8\u001fï6\r\u003d¤\u0011t\fvÝRÁžÈ[õlÅ\u0011¸\u0002t×³M˜o5\u003dºàÛ§\u0006;ÔèÆhª\u000b\u000eéc\u0011žü¨\u0018CúÖ•\u001aÇ$÷¥ÁGaðS·×\b÷.y“Æ\u0004Žˆ¤C±x£§é24Â˜\u001aüÔ]I]Þ$uu´Ÿ§9\u0003\"^‰~*\fÀMû\u0001ò~rGR1º\u001a‡\u0000ÏTž\u000fËM\u0026éu¡G¾\u0015\u0003Í®ð•;�0-Á³ìžt\u0015ÓTX\u0019|Nß\u00270šëaLtG\u001d[ó\u000f;é±X87ãž_Äj¥º\u0004µYXâ\u000f²þjdƒ°YjÆEýA Oy\u0002Îñ û2³4šŸšMkr\u000ey@j¾ƒ}Zz65¾†zOToÚC7Wb(É#FGúÙ�~^O#u\"(ÛE¨éí\u0005–Þ\u0011Aó\"ø�Æ‡\u0007h\u0016ôºSÐ\n\u000f£�úv@±þ\u001c�¨�:Ý{Xžý$h´\u0014pŽÞnkXÆÌ4­æ\u003euW\u0000\u001f^\u0015¡U“\u0007hj/\u0018\u0005¾|‡z¡ž\u001bÄ�ï?z¤EúÌÏO�ï`B~›/q›ü¢*ö§Þ6\u0014ÑOô\u001d\u003dÌan¹øv#uYB\u0016ýww.|‰ø¯�µ©Næ¢7[Òx+ß£^ìoÌá\u0010\u0011\u003dÛo¬˜ p\t2Y­ìïÜ71�üR\u0010�±ð1oœ×©ÛØó¤ê;B\u000frC€a/·Ñ\u003da6\u000fõÕ\u0018\u003e†\u0001XsT˜\r†mšG1Æ6\u001aìþ@\r\u0005S½õtñ8½‰À2?…\u0026í4N´Ï\u000e‘\u0014\u0026±’ï\u000b„îxä2æå¢\u001bÞø\t¸Ô0Åðe‡éû|Õ{^TÌ§n\u000eÈÜ§á£p¨{W2xyœ\u003eÒó8¤þ®\u001d *Æ8R]\rfŒãÍ\u0007éAC%ÍÒ­êÔLróJ†\nm\u0027šŽRo\u0010þY?\\ëYX½ëë¼~Xø+\u0015ôþ\u0004uš9Y\u0017Ny“‘\u001d\"L…Æ7Ò\u0016\bÓ„z¾É»T?\u0019²`£è\u001dt\u001b\u0006Â’ù¸6¥¡!\u001c»«+\u0004¤½‡î^U{Ô}ü@ã\u0005xw�âãôú,u·ÖÒ­åFw\u0016È*y\n½É�²\b¬õ\u0018óPÿ\u001aõl-ÿòÂ·±LºÍ/.f\\\u0016ôz×Àâ\u003d\u0012\u00079ß\u0003t\u003cÈ\u001c÷\fO·AÞ¯Ao½2æ!hå¨—å\u0007¥3ˆ­™i\u003eÝZc|§ê\u003d›hpÝ\u0016†ËòJá\u0027á‡Ò\u001c¦\rä@¬ �mïÛÆÈ\u0005zz\u0000-\u001dw»s`2¦6œ•\u0016…\u001båÝ|Æ¼†­Šé[Qömê\u0015ÝiÁìv¨çÒÑ)ñ�D\u0004óÑf5lÝ¬êW‚²-ƒ\u001fî©YŽÒt\u0019ô\rá­\u0026S³5¢;è\u0027\u0011!fˆ‡!êÿµÓØ˜~ˆà­8[\u0006\u0011\u0004´\u0003ÚöŸ®SÃ\u0006Œ—\u001f¤)ýK‘Y\u0004{èê}åq5^n\u001a–`kh\u000b‡8î3PºØ_Îs±´Ã}^\r®34}môVˆ^å ó—K \u001cê\u001d$lMƒúØ\f$0º¾Í�/;Œ\u0011,\u0017\t.d0\u0005;ó³š9\u0007þ\u001cfîóB\u001d\u003c†ï\u003e´“FÖt¨žõèõ\u0001o²\u0010\nª›n\u001eö.Ý\u0003ãÐ“C÷ax\u000f×BÄ!ÿ]`‡g\u0018¥×¦Àë\u0017\u0007åSw³‰t”€\u000f\u0027–«—ô\u0003síDx\u0003]Sã‡ÔG\u0016ã7\"ufÕú€È\fx¦Áf¼\"kµ6J7Õ\f»ªïèbXõj€…E\u0015\u000eÓÀK¢ª�\u001d\u0002ßìH[”zªÕGú\u0006æzð ê+ ¡È¶\u003dô\u0001ó\u0014ƒÎ\u0011‰HíF\u0010·\u001a\u0006örIn^N›š;\u0016deÝ\u000fÇAÜ\u003c\u0013¬°c¼çÔ»“Þ¸šØp\u0014Võ-ôÖ�\\úf§ËÏIƒ~ïR ˜\u0001‰\u001e\u0001x‚d\u000f„‘ÑS�¿\u0014f*7\u0002­\u003e°Ù/¸Ñ0œ\u001f¸`˜î¯\u0017\u0027®`\u000fG¯Žåí—V\u003e];!Ø»XÁ§ß.K§FéíÁ|HË·\u001c\u0013gx¶û‚pê§î„\u0019¹ÄÑ\u003cÒE!]Ä\u001a�¨\u000f«\u001b€9~�e\u0001ACkDNªhÔEÃ\u0006A\u0016”zèC5\u0026c»™\u001eû—‚Í\u001d4\u0018²\rì\u001aºtü×NØ›qz»n\u0019TïœÌ¨�›žøµs\u001f`â5À�Q\u00034ƒ.­Zö\u001dÈõ\u0026+á\u0014\u003e;U\r1_\näÑ#PØS˜_\u000b�üžz€Ýo\u001e8§\u0006ÖF„3Ô@D¸ü¼µÅXˆîÐ\u003e\u001dá{£$A\u0012¢îH]�\u001a\u000f\u0019^ê¢¾b\u001aX%Ñ¿üRHÍ\u001e\u00003hœû•Éjúîøž�ú\b\u003c\u003d‰\u0007\u0002íç0ß•èö¶7º]\r\u001cP“VD\r³\u0001ƒò“0H¾\u003d4ì;\u0013C)\fÑì\u001aõr\u001f\u003d+§é½Xò\u000fhnh/CÎ!z\u0002}/Æ¹\u0000\u000e[w@Mï\u0002\u0027¼\u0010ò€\bËZÁ\b[MŒ»ˆûy f*Ž³Ý¹Î\u0010s–\u001eÖ®�\u003eS\u001c$šÃªÑ]YL\u001d¬…\u0011€¢aãtGø\u003d\u000f²\u0016§Q±í\u001eœ®„©\u0027ššé€§p�.zNABGaL\u0027L„;\u0004Ôô\u001d½LÍÒõjº‰Qc\u0011äÕ²åŒ;{Õ»œÔÌ‰Cü{—šÝxš}\u0002£ÓŒˆ™ !¬R¿`éÒåª¯îÈ25àõWuˆ«m\u001c\u000f\u001f\u0026U\rãû\u0010ª\u0005RÒã¦ç˜FBtÑ:˜ÈAo\\Xd³(*\u0016é)¹–_d\u001bÝ‚\u000bp!Ÿ\u0001 \u003e(;\u0005²^U\u0013%t{�šÅÕ\u000f­Þ¥ôSN•úPLo“pUè\u001eÆ½\u0019êO\u0010‰¿\b\u000bÝK7ŽmÈ\u000bç¡½­ô\u001aú£²žÆ–…sè{Ia@Q�z.°Ú7.ƒDF\u003c%\rÆ¬”ÙrP\u0002ç©O\u0016¨0Cß\u0014™0\u0013«ó•ô-›ëñm¹4!ñXOY\u001d/ð7p6.¹~ítCÕ¾SSÐ–]â$\u0015µä«©fhÀ¾�À�âãt\u000bžOÈN¶¨÷˜™êmu\u0019o§Ð\u0018VO+\u003d,6]ûVˆ\"¤›ë°.\u001b\u000f5Ò\u000b7”D�Y4\u0019­O\r—`-n\u0017\u001e£ÇjRÍH\u000eÐ„‘ö ;¯šL4\u0013+èmFÚnøÖ ½â\u0018\\¼\u000f�\u0018\u0011è\u0012£XžÒÈ\u001e™a}~†Æ)\u0006uÂezüéZ+§£z?]c\u0005p¿–®‚ýmZ\u0016Vl\u003cDýê•Ž¹hêA¹šhO’~\u003c¿§€~*�\u00017]]±ŠÆU/ç|6›4‚Ï}ÐifÛ9¨pq�ÊÀÖ\u003d+Eaì\u0010M\u001f¬²hî\u0018\u001e^nVê%ý$qö¢�!HE\u0027:e{�Ù�š\u0018e�ç×Î:\u0003iò�š)\u0007VP¯ø¯\u0005%Å[`\u0012ü\n³¯c¡œñ\u0005âåðŽVÈªˆ?ïÁjßk\u0004Õ†èÒ1!s{’M: øøiê\u003e\u000eÍñ$ÕktXið×N–8Žòoýt-\u0027VM\u003d;\u0001\n\u0027\u0019F¾\u003c°ËsBõU®^•š]“±b\u0005ê9]\u0014¹�¿á_\u0016†d¼”û\u003c¬)õfc¥¬GØ\u0010«Ð2ØSâßž²ý§2Ì…\u0007+\u003d¹Âë]\u0011¥{‡![?Ãr?¢‘Bo¼ ¯z\u0027½C#[Ø�-‚:é£Ç©ÞÂO×`Y.§z—oê¨¯4ÊÞ·\u0007\u0012÷ô¼\u0001;~\u0011(Cû[,\u0007/tDÃ ˜ûËÑÆàAùë\\†HY‡éå‘\u0004\u003d©\u0005ø¼\"Ñ\u0005Oyªëx3\u0016{6o—šØ\u0027„S½\u0027v7�`Tp\u0007þ�I\u003cæ\u0017²†\u001cð†ÖäŸ\u003d­s\b¬ˆ/m¨3|{�ž¶˜ì‰‡^`2oØ!¢_vz½çaÖf d\u000690×\u0015§é]ÂN%êMë\u0026º,1\u000fèB‰kxd’t}›­\bžørVB%™Ø¾\u001aEÃ­\u003c‚×t¿z\u0003ý¤†e’¥ôp\u0027��ª4Qg\u000f]Ïk\u0000³¼ôFéþ.\u0027Ê\u003c\tƒþ´];d÷\u001b\u0001·nÀâþ@�çÝ\u0026Ä]¤\u003elôF›Ør|¿;Šy\u003c¢áò\u0013\u0000¥ÞÊ\u003dt1\u0012£{�rØ\u0017É\u0026\u0014\u001e§çÀ©\u0003\u003cšçU!;jä©\u003c\u0017\u0014ãO3Û9uBCèå\u001dÔÕÛc\u0007àútºU›zÖÊ,õ�½°\u0011NC¨©rõ!5¾j\u0015»t?@\u003c‡ƒn\u00075` ÏVÑeŽ²?àèä3êdÅó³\u0001çå,\u0003³5FC\u0017m*\u0011Ñ´ZéFÝ¾ubf1ù\u0001zUx@ä£Ð‚¤¼]¶†c4}\u003eˆ§NV±šý!®F\u0005Ê\u0014Çé¾\u001a)•ì~\u0001\u0014u;@Ó\b]ÜA7Ž¨\u00015Ù^¾œ•Ð\u001bL¡¬Š\u001e¸V\u0016iPr˜f\u000e\u0003£›T6§ö{déDÆJw5f(¶Rº{Œ\u00266x—Ö\u0000ôÜâ@ÔÄÙÍ5‡\u000f3\u000e¦ÑOÝ%+a[\u0027Ô»T§E\u0017\u0019!Cù\u003dQƒ‡¨û\u0004�TÐ\u000bWª«¤@Š\u0003À4p\u003dÄÐ\u0014\u0006ý\u0010åïšht;4/û�F—w5°fê\u0002xë1WFÙÝ»º\u0007—«3ôz°y\u001f½Nª) \u0006àh5+û]J›jiÈ$‡ÖPÏ\t\t©ô”Ã(tZ\u0007Å#+\u003d,\r«\u000fôSªsuª§\u00143xP*5\u0003ùž\b\u003dŠÔ¬�Ð?øµ³U2\u0001ž’\u0010££w@\u0015˜âCÃç}Ôß^\"8ÐãQCª¯%‡.®\u0005s\b\u0019\u000bóš û\u0001(¦èêQNv\u0019\bß¢ú\u000eÓµÝô|EÅ:õrÇª3�df´7€/õâä\n\nÏ÷£×‰36Xñì:Ø¨Þï4À·\tlú½zY†áÃ\u001fˆ¦ºÊh`\rIF·\u0014$½³Ïä\u001c\nJŒÕ^fŠ@J¬34\u000e_ÿ1Kû\u0013ÀÖièk3M\\-`5\"Lë3\nÍÒhºûÂŽOÝ›—\t\u0003§µ–§Ä£æ.ÐTþî*õTÍÀAéÞ¨UñúeŒ\u000fçüË¸—\u0001ê‚su\u0007ƒ� �ÂÞ\u0000~\u0003ê©›Ãï1º\u001e´e3\u001fÌÊï÷ÑÃVðð\bÍTÀíxàß\u0002°\fýFWƒÐ…¦\u0004‡Ã\u0011\u0017Vn‡\u0015»GÏ�;‚\u0006Uö\u001avá\u003d�¡¡C‡·€×ßA ‡àý\u003dkª\u0007\u001b_6ztÐ„só7Ñ�\u00032™]Â¨¬0^¨ž6Õ£Þ5ÐóÍí\u001dBv´¾}ã†\u0013•§Y�\u0027i(AãÅ©.z\u0016d`÷J;ˆÑeÁ–ƒ»KVä\u0017™h¹¯ØˆçÕ­[eu9§r€AÚ§nÖ õ@Š/ka¥Ÿƒ¹´7)�ÑÓ²r¨™wt3ºbyjV2!…u©ž4�xÊ9\nü\u0004Pids‘Q\"—Obµ.’dœD\u0016JèRjÜOï}eö4\u0004Jsºtÿ*ú¹ü˜\u001a‚®Õy#õ¾µ\u001e–ð%ôÂ•§Í!\fÆ[ \u0001\u0003“å)d\u003cßF}Û€…\u0006ó\u000f•Ñå�xÒ³#Oõ®â’\u0001ºU~\fnßko´¾P½(Š”¹¸Te\u000fMI­\u0017FøÄ·\rí÷Û :N·[è9ÔÉímõ›�\u001b{ª½Ñ3EGÕØAz©†\u001a´â«rR!t«ñ,ã2™I‰üs˜~)Ðùf\u0003Æ\u001eKä›\u0017ò)�\u0013×\u0010l†\u003e´C\réŸ`¡\u001e\u001aß+Ô�¶L]D\t˜hFô¬\u0018‹\u0012c\u0006ïÐ}ãÞäÃÝ›S3t\u0017×¾CO\"_Òq°1\u0007.þ\u001dX•�V3Ñ|¨5À\u0017Õ\u000f†òÓl€®žßk2!9y:…Pz€“×\u0010íÇ€¬\u0013Ûè#Á\u001bâ8ùfØ§û˜ˆ\u0004\u0019òÃâŸxŠ°\u0004ýÆ\nÏÒwgÄ�\u0000Ìß\u0000å\u0006˜5\u001eC?Ž\u0019»o\u0001\u0013\u003cc\r~•.\u001f\u0013?¯ ´\u0011£\u001c\u000b¨¾sto“‘v‘ú‚Võa\u001dVó†Îc¬ßºÃD´ƒt{·¬¤Ç\u000f\t‚�¸\u0003€u|c\u0014òðî\u0014\u000bÁ“\u0015BÈÜcBHIÆ•I®\u0015Îi÷Ñvºe‡,ÕÈ)8‘Ï+é™\u001a®€6ú~…êÛI}M\u0026\u0010X\u000e•\u0001›Ú›ÏÙ³[\u001b\u0015#²m\u0006Å\u003c\u0015DPÐBo—©Þ\u0026ÕËå\u0017O€‹.\u000fbÖ\u001fénÞ2úN\u0014E0lXÏ$WÔ\u0014\fê›² d\u0001ŠrDãq\u0004ïq[9„g´f›šZÖ\n÷üb˜.ÙŽ§Ô^\u0015\u0006aoúèvþF\t£–JôÏßÞJÃj\f�«\u000f\u0015nz¼©c\u003d\u0014×Uº\u0013¢çQ¶»�9ºDý;ËX¹ÌÐ·ê¹$Ü­\b;¥O%¬“_ª8;sâ\b}O\u001fŽR¯ ÌüÂuXÒwÔ—P³\u0026Ðd\u001d§×²‚Þ¨zU%:U~r•Êô¾â|_U#ÿúMJâ½Xë‚zÀ˜Q\u001aö†ÊÚ„YÁ6ß75W”ÑØq\u0003‰\u000eÁèlÜC�6,©W\u001f7G×Ò]�]ÕR\b\u0015ñîÓµ–T§\t1ú*Y‰\u0012;8+â�ø\u0019§·àñ{BåüÝñ\"ØÖ_Ô‹†\u0018¨Øs†\u001e\u001b%F\u000f\u000béjë™}ª�‘Cª÷ÔéZN\u0005 £\u0027±Žêh\u001d\u0026\u003ed¤ñU;\rSŸzÃ¾Â\u0003\u0026N÷…j.¤z\b¥?%$«dŒÐE7/ÐÌÚz0ãP#”æ‹\rtQø£Ž£ušeŠX;Ñ7\u0018g9Ý†¯ÈdŸ3ø¶p\u0003\u0004þv\u0012ÆcÎ¶Â\u0026ÈSz˜¦÷î¢‘Úõ°*sÇ\u0005\u001d{Œ‚-ÚdxãÍé£ÑRz›šU\u0003Ëcpd§cFœ¤PÑÊÍUÓÔw\u003c\u000fKßs¡¹˜�\r�¶{,Íl¿@O ës¶IR½‡*é9žº¼2Òzàh\u0006,(Lõ¬¡\u00274\u0012¡»‡eŠXÆ\u000fPD‚\"KÔD\tÇµáP›xPñ¶’�ñ~Š�CÍ¾Ium9|˜Ó©4}¢^êâ‚`Â%õë8PÙS K\u001b†èÎ\u0026h�\u003e‰\u0007ä—nKÍ@0~äPøÓÍ\u0006ÐÁù”éÃ\u003d§žPGé¯�!xucfO$¸ÿzª«šl…jJM\u000fb\r\u0003jô\u001c\u0027GzOÈ¸.$Á«ý\tõz9ôñ\rè¿Ç0«ß\u0015·KC¿vîO\u00185w³\u0018­\u003eÁòÃS\u001b…\u001d¸\u001cÛLýÅm\u0005ôFÙ…µWž®‡Ö\u001a7æ\u0026\u001f\u0006\nÚ°\u0027¸­FVÄÏi¼æ¦\u001d)N\"ü\\þéZª\u000bL8\u0013:}!Ã®†à\f\fpMj\u0015€Ô\u0003fì*÷Y5Øˆ—fèåf©\u0016\r€Má\u000bÃ\u0007\u0003fšÞpª°ˆæòÚ¸¾ÔXðó¹œ:5xžžû@Ï\u0007¬‚\u001fðÔ»�\u0000.ÑƒZ›\u0005Jü§è;Ya,Íy\u001aÚ-\u0019¨\"Ø¼�;%\u00026BïãP’7éÞÑh\u003e{I˜Ù+�\u003c\u000b™¨‡Ç›´hºÝ6\u000fÉó\"©fZE4 ·JcIzE3Æ/w·\u001c\u0002c\u003c\fR×¶Íâ¿\u0006¼þJ�x\u0001\u0011ú`áú½¡öÔŒ`É\u0002 ã\u0011\ròà§\u003eiõ.Ý\tÞx¿\u001bW€VŸ\u0018O½–ž¯„£ûœ]¢\t‚S4Q¿\u0013ëõ­D\"B\rFÁûëÖª\t¯_�Vàu_A^ýQSØ IƒB«��«Œ\u0019\u0002zÓ@‘@\u000bDàn\u0000˜|\u0000|\u001fjo)Í­¢ï\\k$\u001e\u000f¾,Ü™»Î›ÜÆÕQÝ6èy|’¡¡£¼J–Ðó}ô1q\u0010W»è—\u0015\u0001\u000eËX¹è¥W‚+Ð\u0000ïÛsÔä\u00265—êªß#ÈÕã9ejpË¤\u001aF×7s\u000e¾·�\u0026Õ³Ãªg\u001d°§AÔ)ƒSà¤Ì®\u0016f\u0016\u0027° \u0004ŒóªMBæ\u0006[`Ýï\u0027Á\u001d\u001dàŒéÃ4á§[ë±Jƒê�›ºÍ�\në˜\u000fÞúa3®\u003c¥¡M€Q]4\\«úó@�iLv%®\u0017\u001aç®\bR0ÎœÖ³ú ]Ï°\u0011AšÜç\u0016Á_YkrJ¥4[q¼%ÁÁEX…�ktB^,_ðÓ5áE+OÒ?ž\u0012\u0003nyÈ1úéPc€5r?ý\u001c‚¶\u0016cZ¤\u0026…Ð@²]tGÍ\u0002óÝ¦G`šNÅÉÈQ\fÔXgHÕ\u00155{\u001a6\u0019\fm(ÿA½:º\\WÒN¬\u003egTG¾\u001aˆs¹rR½:KS«€s¿·´Ø!í¨�ê]ˆf#P^sô3–sMªS”B\u000b\r� nÕ[móR9×zõÃX\f0�?à2“z‘…F5žê:\u0007\u000f ÔJsh„]•ëP7ÓY??êÂÛsÆN\u0005k·ÐL½zÙÄÑ|ƒ5¦èm,5¾ÃX)ãÓ\u0019kãïP“k�BEÏÑw{h\u0016Êî\u001e�Ùä.¦w�Á\u0013ëN¹uõ+\u0017[Ã•53\u001cjiˆn;%LÓ\u0006§ƒ\u000bYŸé‚þû‰_;uˆà)KŒ\u001a;A\u0017\u003dtï0pà\u0003ö†’\n^?€Ë]~â¹\u001d¹ÈOuí\u003eAÃ›id‰‚Ò‡áüÉƒ\u0007š·¬nE¿åG«Špù\u0001dâ\u0016\u003dZÆÑP6\u0000À±2P¦_K.Ü†ç©®\u0014—²�/±‹¡¶ä\u001aû7°rí\u0005\bÄM“Þ\u000f5C�?TÓðÈžsDm‹HÅ~\u000e\u001bŒ±ªx»Úë•W!Û¯9:\u003e±Ý„ÇK ÷\u000eÒÅ@$FýK\u001a |\u001e”\u001d\u0011Âx~íÔñ¬;\\Iû6²é\fdXªK\u0005�Ã…qG9�ðÈ,@(­c X¾õi(°ç¨íf\u0004|ªç\b�Í£\u0000¤¡\u001b$¸~ÞDÒ¼Þ}Pã×·ì¥Y¿É�XðúLñr�×œ*’;»ÒZ\u000eØÞ©\u0026Ž×Ò]5v,5ž»¤\\WÝ\b†0ö¨\u001b£\u001a4°›\u000bÔ—\u001d„Çô\u0000|ö!Ÿ¦šqaë±M`…#Å°­ýíG�ò\u0019e¾\u0018¤. °YmT`Mx/Ë\u0001š\u003d.\u001c\bgî]žÌ\u001f\u003eçÄÑU°\u001f·iì”š.ƒ.Kî„´õ\u001b¬V„ßÞì¥¹‚\u0006ú\b]LÓu\f¸‡�)\u0010!þXÊ\u00123’¨¤);\tL—/P�k?ÝVsº\u003eg-ÆÔ\u0006.¹nøø\u0001ýà3ÆÿçCí¢fŒæ(òú›¢àœ�\u001bÙ˜\u000f�_\u0005å9\u0001˜wÍ  Òb†Ž\u0010ÎjˆßHÒü\u0010áI\u000f\u000b\u0012!t\u000b6aíçj��:R%\u0017(äÀœÉî—ˆnñ”ŸX\t�:¾„aÄ}S?^Ô\u0002†¹¹¥ž~øtÍjÆõ\bËI·šé\bq\u0018C0\\á\tÎ¨©çj¸”\u003e¶\u0001°öÙQÝ‚„‘‡\u0001°öÐ‰å`™\u003e\u0010ò½zN7S³0ŸÝK°Ê\u0002ÇŠ\u000e–a’à*p\u000f`À�\u0003\u0015ôÂ}J›qõ|\u0007óûuÀâá}Æ0$•]È¬Ùö”qÿ\u000bév�×ü\u00277äNLCI971VáS\u001f\u000e²q\u0018†\u001a\u001c(Vo‰“›jÒ¤VüônS\u001d—ªLž¦\u001b\r@3\u000fËíBl‹8™ÎuG’\u0003*²K\u0016Ê â½Q ðWp^û \r×\u000eVrüÌ¤Ú7rŠ8—\u003dŸi\u001aÃ\u0013\u0013©.Îy\u000eÂÕ\u0000ÃU6ÒP\u001c2?¶dG\u001cPk\u001avê\u0015L9g\u0002\u001fã™\u0019Æ¡oìÄQ¡Õ(œuT�\u0017m\u0000ÓV´Ö\u001d)ãdTe±ÜW\u001f“\\´Ôcû$\u0001XÈ\u001bÇL9hA\u001b]Rƒ âýÓÇè::�\u003cÍûˆÚÕ[ r†3÷ùÙ1š¨á6žpñQÿÊSy{e\u0026p�.\u000f\u001eMqÀY\u0014±�\fæ$\u001d\u0007%ßÃÊ½Ý%ˆ9pÊ.¹´\u000b\r\u0012‡!ˆƒL%L©žî_È§;\\›¬k¯{©¯€n©I£Ù^D òŸìRã\u001cå¸Î185Š•º\u000fK(\u0015+�í`v€�žVIN\u001b9@W¶Ó\u00038\u0019ï¹¢é~€\u0026$ßQD\u0013çÏî”Ý\u0012ÍôcÍ9úà\r\u001d¤‡4–h§W«R½\rá´ÊÉ· ÝèJu²„ið-ýB\u0013\u0018÷\u0014Ö#\u000föùi4\n¿÷9M«‰\u003dí\u0026ùB?¨\u0011Ù\\\u0027A?Oâ\u0018Ó²\u000b~öK`ü\u0019ˆêÏ:[’wZ½\\\rž}Ç\u0001‘‡µ{%•Ä\u0005â½ô´\nzbêX\u0004*±_\r\u001eb\u0027îí:Ø…™\u0012æÖGùÌ\u000f\u0003‡h@\u001b±INPLÄ\f\".:b¬g§_\b\u0001ª¿+Ý\n\u0013]¿J\u0004¾\u001eìx\u000b\ndÆÜ}-;ÙdG\u0017Àw/»ìk›@ðç\u001cñ9ÖA·dÃœz³Yì³\u001a¢Þ\u000e¸¯²šAÃmãîãðFžŠëPH\u003d\u0015ö~‘z¡\f–ñ#È%åÞ°·ÇémôS7¦ÐŽö:SãIõ\u003e\"‘WF \u000f@˜71ù\u000bK\u003d²I\u0017‘ï/6Ù×2ˆÖ0ïÁ0Ó.�~Rnâ�¦\\‡�ä\u001dº\u0001Ýý‹[ÿVŒùôï(/§+\u0027è\u0003\u001cÆ\u001bÑ\u000bôó^£€çxŽÆ\u001d§ÙMôK\\\n¹\u0018³BøXDj9NW–�I\"¬5[‡�’¹oØ1t�÷ë�É·¹S8^\u0017b~ê.S\u0003\u0005ÔWF/Èx2Œ\u0011îðrN4/aÝ3\u000e™ï7G+±\u0027!AlKcøÔì\u0016,�Ø„\u0010ü‡nI9r¹6]2\u001b‘ÏÒ\\\t½]åfKÁ\t/©f,”@P©7yªzƒÎ·.S#mù4Q¬úÍ.•“jnuN\u001bk\u0026Þ+§^ùÒ”ô\u0014ºBë¡þ®,[Ô8—º@\u001c\u0014¹ÞJW\u003dj„:\u001béRùrXÆ‹uÆ\u0004^¢»+ã\u0015©žÝj0¢†÷Ò$\u0017\u003cí�\b]¦{\u00116Â“mÇ\u0013[�–îÕBý^[]\u0006ªÝÍ�ÐH½z»\u000bú\u003e\nîë\u003eM\u0003©®#« ö¯M)XaC\u0012\u000fþP\u000f98Ø±Î@T\tGZÕÆj¾Ûïõî1j\u001a¾\u001fo\u003e\u003d¡Æ[/,ç�-\u000f×Pÿ9ñJýÐÔ¯÷”p…\u0005\u0026$¡\u000f¼3|Ò˜¨i\u000fŒÏ÷`Ã\u0006Ï…\u0003ûur6Õ#5\\…\f\u0027\u0013\fa9R¯ŸÏ§!®\u00037Ê¶œ¦AÜ³jªŠá¾©�¡.�$!¿‰\u000b\u0016\u0018æ¹¶Þü2´{¹×\u0000$\u001fC¬¸\u000eˆIõ¹UC#!ã‚H4×’\u0004o\u0001Ð¼Ùä©\u0026ª–iÿ\u0002ÆÞË\u001eÍ¤lÁ)®×qxõ´žn\u001dW\u001f*òò×U\u0018c\u0006P÷ˆ¾�¥fJ\rþ1„(¤÷\u001eƒŽ\u0004¨ŠKkJ“6ÑÓ¸\u001aì NzY¤\u003eB«]R³ðd§ «\u001c\u0004 g\\2ûc\r\u0006°üSw)u­×Æ²Q\rìZ/kS@?î8\u000eëÿ´n\u001f ýOºØdÂ¨”Rõ!÷\u001cîõ—V–dê\u0018¡‹X\u0011¨\u0010SW\u0001®VcËÏFL¹—Ÿ£UO€HŸž/?-ø\nZî\u0003\u00269f»4®ø‘\u0012hò1Vžïªó7¨‘èÉÖ\u0015PNÝt\u000bœ÷†\u001eÁüŽÒ�\\‹~ØO£\u0012½´èé\u0027ˆ\\\f:ç’ë\u0002\u0010C¯‘…\u0019õò\u0014Wä\u003dìØº\u001eØèžIÛ\u0002Höoe«Ù¤†áÎ‹¬\u0016µÒ\u0004ú1Å\u001d²÷[\u0002\u000e\u001e@\u001dM¹\u001b€Fï!Jï¤LÙ\u0013jƒì�´BÁýœA…rHÝôÞBÀ†Yõº\u0010¶e\\\u003d-ä¶Õ\u0014pÅ,ÝÙ¾2Õ…¥\u003cçM‚\u001epté�‚Ó±ž§\u003cšî6¿8±n³\u0006¤{v.\u000fKe³)ƒ,g ß¯™ºž\u001eY›è¢7ê÷ÆA·�œ·ªÛ*\u001alã!ÕÃn\u003dxíI\tý²\u000eîÏÀ~2%¿©ž\u000e#.\u003dŸº-Õ·¶]4‘\u000eRKq4×\u001c\u0001s¨¡r\u001a0EãÅÔ\u001d7jDÐ³eŒÊN5è^\u0002�–Xž\u0005Çè¥±6ß˜ °\u0001¼4¶ÞÏ¥Òtù\u0014g¨ji4\u0017ãž„ï\u003cÃ¥F\u000fÚÎžÔ{ÇgØ]» ,¶Œž­­\u0002¥¸\u001awZ\r«Ñ-û÷\u0000ÇßiP£Ç×‡×\u001e�æº¤\u0006’°�SA®ÒñD[ÌÆ†Òz3Ž\u0000xá­ ~ �n¿\u0000�\u0002@ÂPµš­¢\u001fâ\u0027-º¬¦S3{ÀA—è\u001bõn�\u0001ù03wdÏŒÿ×Î€F\b2É:ú\u0016¬8�¾çZèa�½+¾p\txê{]úì¢\u001b4pÐ\u0016[ÙÿXænö\u0026ËwcÌÝ¼©Õ`\"Ìñƒz­\u003e®\u003c\tõõÒÐú\u0003p˜dtKôö¼;\fÆë`òÞ\u0000Ý\u003d\u003e±Ê¢\u0019½oŽa�AÔ`è™ÖTW}k\u0015³Î;\u0005W\u0017öxÊ\nÑ”\u000ev\u001d\u0001\u0003¿]{^\u0000M1\rœIÍ¦ttå^•z¹í0\u0016`�ˆ%�zÖ`ízZy·‰]c#bQPª¦Ý²še4Ec\u0007S3µ¶Û\u001fZí\u0006g~´Ë›J·3Šˆiœ•G7×xýhì\u0011\u003dÙrL\r\u0019Ÿ P\u001dZ‡õÿf%`‹”Ü–í‚Y¹_\u0005�ãê1S‘aµãÒ\\\u001eó}\u0017TÁø¹3Â}èvu,×XÞ‚õQí$°•\u001câH\u0004WûŒ¨—gê`¼_î¯�æ˜«tP\fuJ8¨Ð`\u0005SêOïc\u001c\u0011ÝÍ±J±\u001e!\bðs{~Eõj¬žÞÔ”lÛ½\u0016‹0Ê©©µ¹4÷éÚæòjŽ\u0005ÓŒ¤\u0007$ò\u0017Œ\u001fQ/Ï\u0001˜¾fŒ•Ó†9^[Íñ\u003c ¦f£l‰Óû\u0013\u0012Q,Á,»£º°s#½TfÓ ‡jŒ0ýBc:ö4Æ‹Æ@ì#ý¸®tKûÑ³©Ù–|»�ó±ÕðM8(„†ÎÑ·¥¦�ÞÍ�Úh\u003cÕé]J·S�Ÿ®ùÀ»“Ë+èAx%HÛ±ª\u001d�ó:q®ŒK5% W\u0004µùŠn3ÖúÖ\u0014|%€ÖL€h-\u003dQÓ9ª—zr¡¿Îò›\u0026c,lmW¶\u0006y8ð\u001e�5ä�\u0001Ì\u001e1‚ø®®¡Dõ\u0014\u0018ë1ºŽ«\u0000V¯§\u000f»¹»[àÕ›j¢F´a\u0000¬vG½rjÐ1°N˜´AênvÑýMtéÂùPƒh®Â@‘Á\tïá…ŽÑÇVº¹dƒwiª+5^\u0003„7¹Í¤¤D�úéé\tõl3\u001aû…~„Æ\u0013›\u001a2ÂyÐË\u0015¯û�‚6\u0013«�\u0014,-c”Õ\u0003\u0001ù@?$�µ\u0019OÔ¥@îI°ø+Þ\u001e\"ì\u001do52l�Z�53•UM�á\u001b\u0026¡áW\u0013¥hëE\u0010\u003eûC\u001fc„a¦Õ/ê¥7D³žC\u003e5°Äl\\. 7^ï‰eXöa§fØ.{ölõèX€êÛÚD\u003d¼\u000fï\bÝ¬\u0004ß}+1�‚Òµun£%Þ\u0019”[À\u001aäI{î\u0026Ø¬n\tYA\u0004nÒ�vP™Ó‹\r»�`f«Ø6A®º+Ž„.0Dì\u003dµ§\u0026\u0010sÓ÷-’¿,l¡Ùó¡–eÞ¸7ÊK7Ç\u0002öj\u0003ŸŽ±¶ì0Ø£“¦JWÑÈJcÇ‚4º\u001dæ¼oÇV5â¦ëjŒ÷ž�šýk+hz9¸|šž\u0001~Ìí…Ž\u001d«Å˜~VsGðûÕ}t\u0017ã¿kx`–n¯‚Y\u0018Lƒ6OðS7Íµ®¤\u0001\u0003å‚y:cø„¦NÒ/ùGZèöÎÒ5\u0018:¬ñÝä±_;k6Ñí¦˜Þ\u003cÐ\u0005Àþ˜LÄ·\u0006\u001cør9}\u003cO½‡0÷\u001då¼*wÕ³Õ­©Ù\u001c]„\u001bX\u000fö\b�‡µ»²šf ¿ßÐctþÑ.A.\f\u001cñ�?c,wèœš5!\u0016L} X’ \fG+éF„\u00039O5Ý\u0000³¡÷ßº¨\u000b\nz*â[k\u00024ÐÉ’\u001d+NÍ0“Œî15.ùF)ä½®JJ*�\f·™­5þÆ(u©ñ\u0003t¯ÞN\"–â—Mñ\u001dôzG¾\u0019�šZ+ÎµµÑë_\u0011ç�u×*8š£ÛLÉM)ðÅ\u0013º±\u001f\u0012\"1ÐÂõké\u003e„ë1ÝZ\u0005 ð\u003dWš‰¶öX\u001c\u0000’Š\u003eä\f�uÀ\u0004Ýá\bo\u000f\u003d(\u003eG£\u0007è.\u0006°ƒÞœ\u000bB ?Ð•v´4IÝ«ÅÖ™é¼ã\u001d­o…)Ùù~|ZÍV\u0004í¸\u000e€ú\u000fÆL~cD-ŸfR¼€Âb\u0005Íj®ÐäøŠ;¼ñó4SÁhhÎè£éz\u0018˜\u001bÒ—¤\u0011Š8—FÓ\u0015\u001d9[ \u0017_Ó\rèó‡Ë¡vÞ\u0000¡|(‡f¼Œå.V\u001fÑ÷-ê?ÓŽ[\u000fÌÑ\u001fþÖó\u001cxêá…¹I\u0013ñ¸¤Váý¾�Í\u0027ž\u0012\u000e ËŠ\u0004tYûYÞ-¯Þ¨\u0017åî5`˜ï*kŠ.\u0018}Ð£\u003e¬¥É\u0026Yußº\n\u0019²Œ\u0015l·ÉÃf5\u0007Šy\u0016há\u001b Ò‰6\u001a,‚u9D\u001f[ÎA\u001cžÓOÅ,³/Õœ\u0011ªs4\u0011Øb¼�üs\u0010¬Ç©™\u0015\u0016Mª©\u0015p\u0011\u003e^ ¾å\u0010ÒÛf„\u0005�—i5×Lßq\u0015‚\u0005máÝfjJò±˜}†�[4:žãŒk\u0017PñœT\u001eù¤ŠÇ¢¾p¾7Ù¨x+¹9EçøNês£íIzzdåÖ­°fCzCx¿Ìí\u001cÝ¬®:\fHuý�\u001aê¨‰ï\u0006ï?æ\u001cç.»,Œ®T—\u0017žÜªÞÇ!Þýìø½Jõž\u0015\u001eÕÛCÚÙ\u0006?ƒ\nÖ\u0027´\fp¦šUÒ\u0013\u0005\u001dr›¾‡P\u0018þµR½pmÍé\u0014üì{c“\u001eI]£XÓÀ\u0016}\bˆXÐ’òX\u001bÝ,Î‰­a\u001dw…\u0006OúÒ\u0010ÂSÆ…rúHˆÇç×oñ`\u0015îce®P÷ÑƒGá\u0004Æsd!JêÀ\u0012·¤Î\u003e¤Þù½æÐ4z$x\u0013¿±*°\u000báå%5…\u0019�©‘ƒ Ý+ºÊÇ‚ÈðŽ\u0026à•L¯ÞÈ;\u0000Þ\b9ûuJ•\u0026~íÌáÝX÷9ÈÞ­FÕ\u00074qŸU\u0018\u0013…MçÃ\u0003^oŒnì¤\u001f@•²U\u0027\u000e³Cb”•æØjz¿\n\u0012ñ¾Q\u003d¯Ì£Qÿ\n5Î\u0000«—ëÓ€”«3u.Äøy0}!ßOïBKè^\u0007�\\hâ\u0005x¸\u0001]·Ò·­Æ¹ðË\u0006‘|\u001a\u0015rû—¯Åð_¥ºÊ$ì\u0011â¤àQp_Ï\u0005hïg\u0026ã*\u0004:å7f¤\\õv8\bC§hW\u0018Pu+\b\u0016ŸáM¡¼U“\u0011O)ç´\u001f\u001eJÏ\u000f\fz]oßOã5®Ã§)5±ÑÞ#k@¡\u001a`¼õd\u001bóÑGšˆ„V›\u0006nÐÏ–ÙûZZ\t�ï~å\u0011ºtÈRÓk ‡~\u0000€óêdÆ°\u001a+ÅÊÝ\u003eÅ\u000e\u000el\u0019oñ5(¿ŒÑE7¯ÛÃ8çMìýò…A½Yí\bûß]¦·kXë\tc4^må@R?fù\u0003\u0000õ{Q\u001cUú\u003c\u001dz›LA”sØ“\u001b…\u000fð\u0006\u001eñ#\u003cø\r\u001ax\u000f}\u003dÇ%À\u0018ìÀjàÀ7\u003c³·4±—‡ÐKöVTææ^�’{»½ÀÒç‹m¢‡-ÜþsQKR\u001d_T«úhö\u0010]]\u000b¦š\u0004­¯›“xø0€9Î–®:\u000fÿv‚FÏÖŠ×\\P’\u00008ú\u0001¶,\u0004òÍÐ\u0013ŒuÈ\u0014#x¸\u0001ïRõ¢)—\u0026-\fû��¢”^Ö�áô4ŒMì@­’$D!ðà\u001bÛó\tÅtàyèHU\fZq\u000e\b©Kÿ|O¯µïÔ•Ï\u0019\u003eHÿ�‡ÎÔ@w¼0µn\u001eß�Zz‘\u003cT*c3*í\t”Ö5\u001a;kv\u0012åw,£Çª§¼Ø\u0014vÂÃ)2…¼té×Nû\b°àÑ}Ð1wÍ±\f\u003e5¹ÝÙñÃH¥”^ì®U£…¬Y÷\u001eáÒ]´U\u0004\u0027pJMªgjê°\f�¥ëé6¨Ó{,Èƒ®\u000etð\u0003;\u0001�ì\u001dÙžòD‡z‘êUýu)\u003e|�gùFÔ\u001aÐÛ\u000b£)g–¨çªÿ\u0000¼…\u0017gôA]b0ñÄsÈÙl’~Üaö8úy0ƒ@1Sô\nžÓlÅ§kç…Â¼etè\fÓM¦Dc5i[ÄçÌÐpÃ6Û$û@x¨\\2\u00077œÙhVirÃAyi%o®¼s–^ØBçÛ‹yÏz—ž\u0001¾�ÐÇ\u0015¼ýó\u0027\bþ ×S�õü)çL¡Ò5Z­Eø¬2�aû\bÓùTM%Ëaœ{�Óµ¦š3)\u0000\u0010\u0000�.º¹�FT?¦ò~s-ãÖ®|\u0016–�!\u0003í‹é!û-Ã5{é\u0027‰Ù„À»¯�•³\fœ`Îá\u0011Ü7e\u0006\u0018Û\u001b\u003e…â`\u0012Zñ\u0017Ù+^\u001aÞ\u0000Öà¨i’¦–Û\u001b|·Ô�šã€ðS\u0011ÓþØ\n�\u001d\u0003ã¿c;ñ¢\u003e)åŸ\u001e\u000edp\u0015øÌ)(’d\u001e½9{ˆn\u0001WõÑÍ“°“àc\tTûë0ñWÆù�vxE—j¨kWµ7î£§1SrPJc\u0011À\u0002#6Ë4\u0004 É“4³Ž…‰#��™gPr—m°_‹¥ïÜFcŸº�ÕÐ7¡\u0003j lG\u001f¹fÀ\u0014InZµÃ´\u0017Üøœ.Å‹�û*Œ@?njcÈ\u0007êQçú‡éÕá�\u001d|ŽŒPüÌzºWÉ§\u0002\\yj\u000eaÊ/\u0010\u000bkŽ\u0007\u0006m\u0001ñ\u0001AnÒã£!oh-½Žñv?á%S4ZÂ¥H�×˜M\u003e¥¥b\u000eÀž÷Î¦zKè{õ,©†S3Q5|¸\u0016dx�IO\u001en§¾úÿWÛw5µ¹-mÞ¿\u0002Œ]e\u0013•E¸À\u0018\u00036Á$“E�@\"KXˆ`08ã\u001c\u0010à€ÁFdDÎ �\\µºä\u001b~Ì÷\u0017¦{­~±gÎÌÔÜÌÙµ÷!ˆ7¬µºûéôôå�CÀ¶\nc†Œ‘öèIq‘Ø àEZ\u003d\"\u000eË’“+ã Ø Vo!\u001a‚§ªc×¡VÖ`Mddm‡Ÿù­¬r”u¶ j\u000b›ÓnÀaå#®ª¥À­ª•çÐ-AöÉ®|\náS¥¥|ðPbfsÄv¬2�äñ*\u001f�I\b\u0007¸\u003dÇ\u00117\u0014£L”N¶¥àQ÷—Ë4£NO»û\u000b6ÅR/Å\fP› \u001d¬“Þò¾X¾†ZðÐR%‚yªp\u0018•Û,ÅQg\u0012¢\u0013E¸Fx¾à,\t\u001dzb6XÓÈ‹L0›¬\u0002´h¡\u0011;¡\u0005C\r\u0012(D�\u0003\u0007-\f·ì\"�\u0001Á¤\"î^Ò£ç\u001bAÁ\\“ŒtÙxåUôâ~\r\u0013ìŸD\u001d\u0011×QòßÄõ4Ž6ùˆ4\u001f\u001e˜»ì�ªw¬”ê2¾\u0006~Ý\u0014G\u001eøj��KUžë�#Ü]�¾Å\u003c]\u0027Jù˜q\bg›\u0018�;Ý÷`š«.Œ0“—ÉÉ-˜L T@\u001d*†\u0003\\ü8_6\u001f¸i|\u003eU\u001cÐr«Šû\u0019\u001dâw)|²6Á\u0026º;\u001f†�š+˜„ö`+•»Ék\nè9\u000fq}w;R`*›já)‹4\u0001�ÌXi6\u0019û?––/à6Šù\f\u0011*-¢ôéw\u003c\u003eæ¢ÖG\u0010èCO‘š•\\°ÓÜÕJ©TžQ\u000f\u000b\u001dè·8†U²©e\u0000\u001d\bïÐ}Áu\u0003èEpÎb€œ�q†B\u000eƒ,GùZÚh@›ð\fæ*%ßÓ_Ø¤oÖË*ûX’Ó‰«è8pµ¥ž‚‹\u001cÚàòxC;.î¬ØÈ-–\rçtj\u0027ÅÖcU™£.vŸBBx2ˆˆgÈ\u0002¯e¦ú€ŒãŽX\u0013+·ÔÕ.Æ\\¥@g0©æ\u0001—ˆÔ\u0012+Ó\f3e\u0016‹M\u0011ª³yÑ¾Í×(}aVQ\u001f\u0017L•ðv…ogjúHç\u0018Q\u0005�7ð!Ãðåb\fÆœ×óð…“Úà¬\u001a!NØæ.çä�“4x\u0000_v\u001b^!\"\u001aE\u0005¢äÆZéÍþãGÉŸïBõrÅ,\u00025ð¶\u003c\u000eµÉ[Î»:Å’ˆÄÁA™)‹Öá7¬ãq†ŸZ!™¾\u0002¥ÝG/rJïÎ‚\u0013\u0002nú¡ôv\u0005\u001aé-Úýˆ®\u0012áíÚÅ˜ûN\u0011\u001a9Ô9\u0013n{\fÞüì²G•_XÕ¦9Ú`¿\u0000\u0015Ø�Í!W}’\nûòá\t|A™\"û™‚bI¡h\u0011Q\u0011x]F\u0005ps‘\u0015�AT¤¨\u001f\u0006Å\u001cøk%MaeftÂs\u001fAÑ’˜gB-›Ï\f›è»£åÛÂWr)Ç¸í\u001cF±V\u0007ñÑƒ;ðºÜL \u0000…™úÜ\u0010±áûU¡.‘µ5\u001b\u0003ä×ã¢ˆ-\u0018ï\u001b**ÖËràå\u000e®ôJ„÷´p*VãPY[{\u001c¼»Çª5xùòbŸŠŸNQ!ý†ŸÆÁGYü‰Cø|\u003dUlß¢Ã\u001c(A¡Ÿ¹ýW\u003d\"$öóª}À?\u001e  »J\u0002²\u0005›hqÅ¹ª\f5ãOŽ\u0010¦ÊrÏ\rT\u0011^\b—¡zÆ«÷EO†`2£P³\u000fN„YÇ�Úwœµ\u0026,\u001cBÛU\b/ó”Ñ6X“X_Ÿ• .\u003e¡\"‡I#hfómë\u001d„Aï]\u0026-krTœH{´Äh`�Ãþú„Ë\u001e~˜h°¹\u001b˜Ð\u0017^´àþ®Sµè\u0014\u003c‰…`7•›ÑFD\u0010\u0006îPC9é›)8V…ûæ¢«úx\u0011Š†\u001f°\u0006´üs¦Ì¬žW!Lwóú@Òë¾o\u0013û¥‚»-Fn\f¡lùê¹:É\u0004A\u001fnð\u003dX©\u0016g\u0006þÑ\u000f\nÊUùPW�X,ë�\u0027Ã¸Š¿rÍ¬œÌxìTišAl ôZS\tE:Â0.N(Ø¡Ô\u0015Zò\u000fpî!Á|B\u0018~ÆDX•ôY\u0010¾ç_\u0010_ÖŠ�9ƒ¨Ág„˜\u0004á©Ø)$¨5ç†ñ”Ò!Üî†a\\V%1\u0026xaju‹åNôDýF›«\u0003UÄ(1\u001f!\\™B•\u0018‚ç\u000f•÷gñ$¹zã2j\n\u0011:¿PGÑ¢jDT0ÓY\u0011×I\u0018�[‰©à\u00175ÓjVºÚ(õ\u0016©ýP\"4à%[ü¸J¡9\u001e~wå\u003eè¾DÆèÌ¥Àz\u0006ƒ™gõ\u0010€å»¨ð¶Ù$‡s¸2¯\u0004ï¶Ëgzå¯Fæh„¹\u0019\u000eÄü]^A\u0015l3 „Qè¼¥Ph\u0006\\oÆ\u000f†(M\u003d\fZÒë;‚‹q¦}äÒ2\u003dã*³Ø\u001a\u0014èŠ°Úãµ 2^DPó”\"‚ÏiðÙ«úÓ,0Ö¥òµ\u0006K:\u0015[ÍÃ\u001bÙ�€îä\u0018W,êí]…\u0005©\"ÒG«2~\r\"#b\u0027‹;~t$‡¨˜Të{jÔ?¬\u0016¶M;9œö\u0013óƒ•m\u0015Y¨{\u003eˆEUB`H”¥ØJHÜê9c`-þ*Ì%“Bò—HŸu.êW5Ö2y×Î*æ¼\u001aÍÔ\u0004ÑB­åßåwµÂ±ÍÖ\u0000\u001b\u001d—URðŠØ\u0000FÅV\u0003\u003c3É\u0027EDµÆrûLÁ\u0001\u0011j¥ø Ú\u001f´Ü›ˆ¶\u003eË\u0006H6V\u0007ü¥\u0010(g£à€\u001f\u0016±ÀIz\u0005Wp{ŸR[Ú\rÒ\\(ÏD*v“*Ä`*\u0006^Ü*\u0016çø�+žÃ\u0015$?ŸáÔ!\u0002ƒZ\b×.�ÆlmçH\u000eì\r”ÿñ\u000f!ÚÛ~Èq!;ƒUs©\u0013•\u001fº¨z„f?Ëqƒüˆz6ÓÅI• ZŠˆ\u0016ÔCµ\u001b\u0010áz\u0019ßDyœ�\u0011\u0007ªÅTU›(®Nó-±�ÆÄ;¦¢®r\u003eE\u000e˜lºv\u001bvõø\u001aKeÚ\u0026£¸ÏãaÞÉ7_Ç\u001dK\u0014\u001bhdæ;½ö\fâ/½G\u0014ä\u0026±ÌàÅÎŽhj\u0019\u001cGÃ¨÷šày…ˆ\\\u001dIèM·ÙÔÖ»œC2T8msg!$aJ\u003e±à\"Eø\u0019öã)ã7+Và„È\u0014ÿøS›ÅÖ\b™¾oÝbW•P\u001b¬ªž·™õz\u000bÌ\u0014X\u000bˆžImMÖMõjädQ\be_i{�16‡²Šä%ìÃ9|VÝ÷-\u0004\u001d„Š¼ØáÃÅ˜!ó\u0016üJÁ“½ílÁC6y1s1CŒ©b)\u0006Þ\u0014›(z±Y”\"ëÛ˜�¡\u0016�ªB\u0016\\t‚®ùA¦ê\u001aÖYtp¨ÚÓu0cþ»\u0019xfÕ¦9ªí÷áÝ Éi\b1Å;±ÞÒ…ï?\t³E\u001aÍ\u0002\u001eÙc›OQÀS{*z\tTMU£EMLb]œ9ÉEp«}†ïY¨¥CL‡fs‹ßñ™ñìí?è\u0010kIbµâÖ] jRWâ`9¬\u0026¨�‰é\u0011|FÜ·Œ\u0006ë\u000b|\u001e–yØ*ÔŽû#²À4\u001a\u0019¼Ï\u001bvÀ-àü\u000ej#Ôí((ó\u00136ÓÑ@�\r]}l!‰\u003e£\u0002jô7s´\u001e\u0014Y†7…¿B\u001fK³žz{”(u^‰ýÌ\u003cWñÅÌˆ†+dÅIÈæêa¥8ëó Ò\u001f‡_ª\u0016Ï|OŸ\u000b\u0007hÔ)îq½\u001eß÷6¾Æú_-¨O\u0013‡\u003dæ\f\u0002\u0016Ë�”q�ô\f�˜‚Ÿºgµ»X[áép3Ú¬}\u0016¦o\u0014|,ƒ¹~øU\tŸ«‹`¬Š˜áÑV}‡5\u001dâÓ_-\u0026”Å\u0003”À�ºœîf Z \u000fð¼¾Cí7\u001aŽÉ[²ç½B\u0003û‰é\b\b\u000e\u0012úñE7íƒ�Š€üC%o2:#0\u003e\u0000S¦\nõi¥œ©\u0016Lš\u0006J”/\u000fÇ�Q[\u0019²Š°\"@Tz^r]î\f5–(êK«˜ØÆ\u0006U\u0005¿Œw.W³Vs†Qª\n`¿[sË5Æ\u0017£™„qE\u001c\f¢3r\u0026æ\rèË3ÓžQ¬\u003d„]ªE\t\rõKeùÏÎÛÓÛˆò\t!›²¹fqêíÂã„B\u0017HÉFÔ»wËf+î£í¦\båO\u0011B¯ò§\u0002™.÷\bb»1x™Â±\u0006K\u000füà!\fæ\u000e1—\rÓ¨¬3”®Bã»{£9Õ\u001cÓQŒ\u0027hÐ‰Êð\u0018]�…®ò–kb\u003dVìTUÞJÍ­Ój¾\u000eáI\u001b:ÆsI¦ø8O\u003eùaZ_\bÚnöôsÅ1ªÒ½¼r;±ëŠuÔjZ!/î¹Ê5\u0018ðíŽP\u0003#Ú¹f¾Ô1ª�\u0016�Ù4œ\u00130JR\u001dr\u001aÍè\u0011¼ÏF\u0000Ñ�j/0Ôˆ·þÌÌè*\u000eÐÒ\bg\u001d\b0\u0015\u00126ØÜ16W·JÐ_òÞÐE”:¶Š­šÛ\u0003Ô8û\t\u0026\u0007)«\u0012\u0019\u0010kVÅ’`è¸Ãù`Ž‚¢‚J€—è´à»œ¦ \u0017«DÂ\u003eÄeÂæt�U\u0016»ˆ´·a\u000eõþ{Äæ¨Ø5ÎÎÕû\f¨ ”š‚æ\u0010¡Û�\r}\u001bqL2\u003d\u0027\u0003Q_\u0006aUÅ\bÙëÔ§Ã[\u0013LÖýµy�\fâx\u0018ðÁÇbø\u0005ó½h\u001b\u0016\u0012:P~æàec\u000e“\u001bV·UŠH4P/VêY‡��\u001cJð´Žg�â\u0016†¹\u001aº\u0019qè¼ñúhU\u0011}bI£k¼l\u0014@ÿz¾5!»©È×\u0006‹™WÕÓ9a\u0012\u000fÃ‹ÎTtóÖØz‡Å™TV¬¹�\u003d°V‚Æu\f¯”Ç!ØæÌNúÈw±ÀÍËÍ5êy2\u0012é(á¹Y-g•†Ž×ñƒ*|‰Âª~4›³¨j¢sì…¶ø´ü˜\u0005ÿdM\u000bC¡Óû-®1\u001ap¡è¿æ`“ÖO¿*ŽêÐ6m+X®· .±EýõÕ\u001cå ²™Lî\u0004sâíÐ)Ä-ò÷óMÎ)«~h0‹…\u0006\u000fþv;\u001fýŒÏx^»áŒØårqŸOÐ@sdÊBöœdr\u000b^9šXð”j14¥\u003e¼¥.ZŠöÿ§[ãjï«Ãƒù]\u001c‰“bôßßÃwô¤Å~†·q ?\u003dƒÁ–“¬ùÖe;\u003c�…\u001b?Á×î\u00168‰FPé£¹ñ·õÁF‰Í%6ÐR¬1Í©\u000böÅ™[ìP¿Ï¸\u003c\u000bäIÊ:¥P“íJ2çdÕzéÐµ�5\u0017“\u0006y‡\n4ÛË2�ýªPQ;[\f0CT\u0013�dx‡{¥¨Štx¨~R\u0017\u001b:j\u0017cüÕå%\u0016J¯}Î¢ÿ\"\u0002äÕÖwRƒc�\u001c\\ðEuz v\bÙÜø×\u001fÙÈ0%¯R;�šrLÕòÅJJÝµšžm\u0011\u0007}fÂ\u0013¨\fC}°SNO?1V¬\u0014  ˆÛ\u0012Ku¨¢lb¿(\u0017\u0005xÍ\\\u0000§\r:eu‰à\u0026:Q‹€q«Íæ ²3\u003cØcxÊª£‘û\u0003qýøW+œu’õ™~gL“[\u000fx¦¶o×ß„·ÑH—ØÎiî,’t’¸‘ëF\u0011‚“\u001a\rf`ÍEmºèÜ‰•{Eb3\u0027!%\u0006Eø)ÅäÛ$\u00028\u001dá\u0006,¥Àô¥\u003c}Å©ºH¶Å\u001eK�\u0003—/\"B\u0003\u003cIÀRP‹.¢\f4Q\u0007\u003e7H[sÿ6ž�·XQEüè °ÜJ\u0005\u003c�å\u0006:3÷Éè”óžŠj{›oª·©\u0002¹fö\u0015º«QýíÉ0¥ÄÞê½†Ph73ð¾ãqð\f‚Zg…Á’!VsZQ ?–Ã/Ùç\u0000\u001fì)Q¿¾\u001c7ùc\u0016ï.5yœÃ{\u000b\u0005\u0013\u000e³áû]Ø…ïñ(½ï¹Š5£\t\u0015dXÓ/|4¥r©¬»\u001b\u000b{¨^Âp¢23Š²U¹\u0014iÕ°¥f9\u0018¸í`\u000eÆ\u001f‹ã^ø4šÂ¦|VUwZPzT¬™xàfnµÂ×Ž\u0018ª\u0015ë±9(Ö\u0027\u001dH˜ò)ìoI¤ªð´Ü*VÒ^“¢NÑó¨–´\u0016S\u0016zÖ?ño\u001e©_\f©ÇzŒö.\bÁzÔ*ª~O—H^ÅŽF cB¤BÇwþªÍ[\u0010õßà\u001fž@¸^ —\u0013�`æ]åþRˆGëCU[c€0¹öf8\u0011g9\u0016¾,•½\\áB^\u0007\u0015õ’BßÄ\u0017\u001aŠë¹‡_wŠU±]Wi\u0012K¹ˆë\u000fªrõ ©ÔP\u001b|¶\u000eÖG#\nü;ºÔòX,hÕüœXµP½ö\u003c�¹[õˆ°!J‰þe›·\u0003V{ò(àý­Bù½Œ©˜{Ý�Ÿ\nÙ¼õ�¬‡ÑÏ·ãí·�\u000f®ªì‰åï.êtš÷}½Qú1d:žÓ¤\"Öí\u000e\u0018«¿GqØ\u003dÜ¸\fI(AÜ\u003cs9×Tv*µÄ\u0003“L8d¯¾«r#ÍêwT0,6LÜ�h�úÛ”‹m„ç\nqR+…S¬*4n§\u0026Sq†®\u0000\u001c–áÍ\u001e¶dÖÃ÷[ª^X\u001f7ŠèU³p÷\u001f¨\u0017«GŒ6ÕÒßÓ�:ý8:7šŽ»±¬¢ë¨l–E°•êê´â\u0012³8/ÿ×î«çWk\u0001Áb­‘\u0004Þ+(À%s\\[¬\u003e­+åO±gªÃ¥žbƒ©æ90Gi]?Œ3\u0005§Oœ\u000eg cöQŽy©ƒ\u0005öAì­ð¡¼žÉ\u000bñÄÏ\u0013ã(\"ŒŽ®Œ„‰¦Z\rËm!¿¤ÝÍš{\u003dŽfE óñS�\u0027˜+£\u0016fŠNÛh¦Ç2Uf¬¨\u0016\"bO‰Ã•Š4QÒ·£\r5o¨Xü®´Ç*–\u0011\u003d\u001eŽ1\"W©D\u0000ÌMÊi\b‹¿Ã\u001bXJ#R:4\"Tƒ„@y½\n5‡ê\u003eÐÃBz5E¨y‡œ|fŸU£D¸EèáÅ˜Øª0çÁW³™“%z±•¦X\u0004õDG!gÈ„áx@\u0016ÁMŠU\\%\"\u0018VªÙL¯°#v¬ð\u0002¶U[¦e(Sy\u001a.tpgÜ\u0017cý°£u”³\u0016ß‚Óëâ\u0000^GýÕƒž\u003eø~ƒÐ\u003dIjÄˆöUAuê\u0026Sˆß\u0000;\rø\u001c\\¡Í™.Ô!ã\u001a’GK�G~²\u0016~\u0014 x´Â\u000f2ªv—^\u001cèúà�X\"f×føÑ�ïz‚Xã\u000b½Ödg\nŸ�9\bT¤Iª\u003e±Ý\u0016¯Dµ°øŸ\u0013„jyî†8Màî¶4\nPÈVD\u003cÏ\u0027 ¹%‡Ì$ìBd7[c\u001e¤þ\u0014\u000e¸Ñ‡{\u0014ŠÔëkÄv5\u000fš°¸Ä^KžL\u0026�\\\u0012a¥E#µW©ôc\u0016–\u0006ñ²Dÿ‰GX‰º.®\u001e?X™Úé\u0016ç­C#Ž6K%\n`)B\u001d¢¨ÃO\u001f´Ø|t¿-4šÌåéæ¨�\u0003‚Y\u0026\u003cp¯…,Ô™A\u0018`Èøë¶Í\u003dàO­^Nˆs�´\u0019“²ÔJmF/l9Å¦ž3Ü—f\u000e\u0015ó³[hîWraJ\u0005ªÍqb5‹�ö~‚¹?\u0015fS(\\H“Åtx\\8ªŽâVZƒ/ç†9‹Úp£S,çZ­DO¯X\\ÌpØ:\f_£s\u00057`¡\u0004ŽQLÞIi\u0013çùÃâ\u0000�q¨¨£\u0016Åc\u000b!Ä\u001bø˜Èçø\u0018\u0026êÈ9Ønéá­žÉ§\u0002ÌT•\u0016±\u0027pëº\u0005ÑÖz\u0027PÁL \t~ðì#\u00162Ô­œ¸Õ§ß�Ïb»äb\u0006\u003e\u003dÐ¤kTã\u001b½\f7\fáê.à¹˜ªg©?#|7.«^m\u003e\u003c\u000bð‰B1(«Cð1Y„›´Š!¥\u0002�•ª£\u0000\u0015È\nÚÊyÔ\u0007\b,\u0002\u0017c\rà¿t�ofåðÓ-Ð¹¥H‘�ò«yèÁCPW‹BzV!Iî\u0017]\u003dd\u0016¾kÄ¥Íb›‰\u001a\u001e¡l\u0004qùNzÅa…\u001bB¥\täx\u001esD§¶‡Ç\u000fà¥UâÍù˜\u001a»†lŽ®AÊÕG\u0003\u003d\u0003¨\u0014N{aM\u000eŽó!Î#ú\u001axâI\u001a,¢¢Š\u0000ù\u0012Lµlu¢7êjHbÎZ�lJ\u0002ðåZ±€\u001az\u000e\u003efV\u0014£ƒŽ(\u0003^Œ¢Â;©C5ì†}\u000fO,¸†b�\u001aï¨\u0016\u000e{ð\u003d?#Î‡ó:sòeàÓR\u000bëÑp–TÑê¶pH$‹*’ï43„²ŽäÀ:éJ\u0005\u0010-\u001ckçr5u)1?¬ž1\u001a)\u0016ç�è%¼H¡d…·Dœ«¤i\u000bGy5\"A•âIÅ\u0015¥8V­f]§ÙôØa£²ÙÉ\u001aM\u0015›\u0018(\u003e§È\u001dŒ¸º¯ù4\u001eKfÖ—bÕ\n?¨4@R\u0026\r\rÁnE\\%\u0004à¬ˆÕÞ�êth©\u0017»MF*;EašˆÏf)^GDÊã\u001a.c*:\u000e\u0017/Þ”L\u0010qÛ\\ÃéƒäVV¡ßÐL\fS“Œ\"\u0001Ey-£’O�:\u0001ê\u0001Ù2û(×Žz�€ÆŠæÍ-\u0015ÀZM6\"„\u0005øvYè„›‰VpÓæº…\u001bz–oÕ!`?Í¡ÔŒI!h™!\u001fF¥½T +d£\u0011T?\u001bl)N€NÆ\u0019Ê\u00013­K\u001e†7E¹¼~òõ¢aëC±©¡Øã‹±\u001aV¯*\\‚ªm¢·-»Xœ\n9\u001eè#|ã\u003c��Šu7hÂÈct\u0010WíD5PLe‘x2PšfªE¸‚ÅL\u0016L” I)\u0010Kx@÷®á“—z”ð\u001b¬ÌÔË±cS\u0007Ÿˆ\u0027ÌhÄ\u0026ë«\u001dUÇzl\u001có³X©\u001c\u0026@\u000e\u0018\u0017MÈ\\Ø«¶«èÈŽY»¨¿\u0018öS‹ñ0LÁ\u0006Ñ$h|Pü¢¯a®­§Î|U¡\u0019S\u0017ìÝÆ#D, ˆ\\“\u0012à{Š–\u000e13\u003er@(—\u003dÏfó L—k¤núŽT±Y\b«¸¶_!PÈøeA,äÁÁÅŒ[Ö\u0016‰�ë�ða÷Xß\u0007\u0010\u0003¢Ú±Sq¬e\u0014`ËÈ±\u0014\u0017¾Ã;Ù\u0019G\u0026I\u0004ÍbÅÕ-¶ïG5\nþ·×ÅN1uºÁ7|Zø†¸â§ÒÛ\u0026\b\u0013)\\5¢Âu/¯LKáßÑ\u0013ÏIËLÂ¤å�\u001f\u000f×«ôØÒ?ˆÅ›ˆœ\u0018Æ‰{EÙ.}KGt®WÖ¾Êc*6ÄQ\u0017›�÷²}`\u001c�Š÷0E.µ§ N\u0005\u0007ôªôÔ�ŸçRqYºD¼È\u0014ÕŠF®ÇuÂ™Ø3\u000eãy\bƒÿ¶Š\u0012\u0019Qµ„¸’íF\u0027±ÏV%™!\u0004oa¢\u0012U\"Þ¡�ZOÅqRý?ô)Óâ°˜2·Ó\u0010ôý\u003dÏú–¡XµÊúféBw+©S˜Ì¨‚ñ-\u0019·Sâ\u0010\u0006\u001fªå\u0014sÑ“‚ÊŒ\u0004›«\u0013Bb£žõœ\u0011•§º�3\u001f\"Êyáiµ½ü\u0001—\u001aÐcÒXšRe\u001dë\u0003±¦\u0017›qˆ;ØgœV~¨ñ.ì(–^.·¥òÝe¼åj\u0019Ú¸\t±Ô|+Ãu\u001bÁíx\u0005Šn0É\u0005oÅA–6k\u000eÖÍýð¬óº6q\u0006Ý±P\t\u0007)­°\u0019‹÷ùE¾Ôô\u0010\u0013ê\u001bà«\bPßÚ8BÈ/\u0012€ÎR\u0007Š¦ÿÄ\u0006ÃðBô¿f£á\u001c\u001dóÙ\u001b©XJm¨Ø½\u0017�ôÜ“ìþœØˆ�§\u0017cÑÀõÌ˜4#bÇçpê„\u001dcn%ª±\u00154c\u000b\u003c*¦YV\rãáš¡òÒoÆ¦8üÀªX)‹â™\u0012\u000bV™e[®)DÈÊóX‰Ðä\u0013\u0004,\bÄ\"�Ä–\u003d…‚rCT[®pŒÚTØ0\"4Y§É\u003cIUq:›[\tp³íJ²^‡°xºšÖtý\u001aj °Eg\u0012avˆú”®‰)æÁ\u001d\u0026ŠÙŸãaÛòpvÁÌ“Ý”†v)ÇÛÁ½âÑ\t“\u001eV„ÆÔŠ0vJc¹\u0013Áº{Vf{ÖY\u001a+äd\u0015ÙÛ‹\u001aj\"V„2\u001f^coÝåE¹_ËUøÇJ™Nø1H�Pb«KìßE¥ôt¤yHŽ\\þ¦­\"ªlš-€ªå�Í%\u0016\u001eyèÈ?E?Ÿ\u0014\u001bì£å :¶`MÿPA§zÇzmf§X\u0019±÷Áï¦\u001b‚2\u001e1x\u0019Y)\u0019\u001cío²ù\u001eq’1�õë¼�¦:ò\u001fî��ƒ`\u0019È‡Wb™š\\  ÃÆˆ¤À÷öFÞ‹à0þ\u0000]wxÖMsÄf59 q\"·¹ \u0015\u001fs]•®ý ‚!žK’@5c?%´W*1\t\u0016Ëâ(ÉÕÙŠ\u001bè¦¸Ûr7l4jywW\u0015¬æ¡e\fYá\u001dâ£ŸÙjŒ+Exá7OM€Oª4Íà{(ÎUÖÅ :\u0027t\u0017c\u0010±9D¸EEÜÙ‰5À�,c‰80re¦Á\n;CýbMeé\u001cx6U!—¡À€§w?ê\u001fB\u0015)«ä®i“…œr(X€øÍ`²Ç[\u0002O\u001et÷ßäjRêöì\"^t7\u001cdŒ ýÚB³°\u003ed„5+3�[ÉŽ§tóx\u0026ãM\u0018ÏùãÏ@ñ£)‡Ï©æ\u0016µÐÔ@oÂ\u001dƒÌg¢8ûQ\u0012}¨\u003eÑ¯˜wñœØ\u0016Y5·…o¹Ž¶#’Z/\u0027ô\u0014x\b÷ni\u000eL\u0005º}SèWÖéÕ8-ž9’Z#Î\u001a€˜Ñ\u001anÄˆ\u003d\u003c[;‚‰9:nÂ\\#\u003céÒ’\u0018eTíx\u0006kE—\u0011Iæ\u0012ã6\u000e¡\u0015j\u0018˜xÇ\u0002?è±_4˜ðÂ\u0011ø\\‰\nhZæÂÃ\t6\u0004\u0010ÊÞÙ)±·ÏTöiˆ‡ç.‹YÖ»\u0010Ñ\u0004¹Ô[Ç›6\u0019�è�s½\bq\u003e\b\u0015�˜óx´Ù›Ü`‚†qeT¬QS¨r\u003d™j7\u0016Öíè\u001cl †xëÀÛ\"Øï‚mÇ\u001d~d;ÌäÂ¯.I¨\u0027å¥|”™aÍ¨¯‰À³Þ\u000e«õü¬ïQ\u000b Ÿ\u0007[\u0026q�ÈÆ}Ó—•\n\u0027ˆ‰ÔúZ¨\u0001`B\u0013ç�8vÕi¬ýhÆ�\f¬\u001c…™%éèrQœ\u0027n¢³}ª‚\u000e\u0026Ôë›ô0K*¸Û‹ÊyÁu��!\u001a\u0018\u0015Ñ·›åÔZÜ}\n\u0004“ñÔ\\¦\u0001S­bÃ�æÚ_Áâ\")ð|ðUÅßS©í®DŽ¶u\rÝ@×*L!\r ~»°ŒZ2òáÞöª\u0014¤ÅÞAÝVË\u001d7ã9.„k½\u0001‹7þÑÖ¨¯þ‰GéÌT–çÆ\u000f­™ÅŽ‚Æ©bÞ‹ç8™°Ü‘˜ÏˆU\u0010‚È¬ž‰3\bêI¾¿²Õ\u0016GÌ¦\nçiíD\u0017Ç³2P©n�´+‘–U\u000bg\u0001\u0001~xjP„»³‹Ù_IS�yibµ\tßð!B!U\u000bbî¸Jüs7Yž~‰%\u0017\"©Ób”HYÖEìsh(\u000fm^\u0007zês-÷¸Ì\\‡ï3UÜ…*Rùˆi\u000fùL~/\u0013ç7\u001fØ\\èÒ\u000e¡P‘³ö€\u0006´\u003d™´ÙÐ´\u001d÷k\\÷ƒ­å*®…«Ye‚‰kFÙmD¹vXñ¥ßgJ\u0018ŽFFç*©J@ùBÖ\f\u001a\u003c\tAw¾zì\u001a×}Dƒ\u000bq°—È¦|\r¾ú8v’Š¿R”œ¨çB¼ü»QY4°\u0006{\bJ·óåP‹)™‰ÿ‡uCŸ:\u0000\u001fˆo\u0026@Ý\u001aì«™9Íj¬\u0015\u0011c—8‹N4 eþÑu\u001dŽ˜\u0004\tÂ\u003d£â4Õ\b?Ñ~�àq\u003dì(,RÉ\u001a•\u001f%çBÅ\u0007pÅgkjD°Aa\u0012\u0013UF×»3ù:Óð¼£³„\u0019¥,@\f¹4Òw®\u0004¾¶åöÀAÒ\rå\rõE\u0003ÚÜË\u0000þóÑe.I”u’Šñ\u0006}høf~p\u000b\u001d\u0013ø�ç„g°×¥\u001cVk\u003d\u001e®,\n\u0002Â\u0026ª•�[øåÂ\u001fÿíA\u0011T�íTŒ´#‚E\\ô…PÉyYÌXÏO9s›‚æ²ufY�\u0001I£0²6f®ï\u00115V°¨œ’R»\u000bß\u001aàõ\u003dø\u0002Ô…ö%\u001b�ô\u0013åˆÉ\tgj™[¨˜\u000fÍÆ\\n\u0027ªø0¼ýã¯æ¼\tÕ`åFÃ÷ÅÁõTµ­Q*]\fz\u001a\u0011Ý\u0005Äo\bgsâØž©$\u0002�ËÉl!E›Í—‚\"m)45\u001d¶áÃ\u003d|ÈC±€¶jª\u000e\u0026•Ü\u001aQS\u001f´Ý\u0018‘ó8\u0026Ü\bãv³¹\u0002Ë\"¶’àk©Z#µÊÍ£²\u001e˜íßjn/¼Çoã:ñ\u001dv‡+PcžÁ„©ì¦Ø„\u0015ø|MÒ\u0007+ö\u0003KŽ£»\u0004Ž•ÒUæ%]Ì£) AZ‚\"¥[\u0026\u0007O\u0014¤\u0001ƒÓpPéÄ•\u003c¡™¯;C\u001a5w¶:±jŸTIŸ\u0015¦2ÐBþì`jºf\\›H\u000f¾ðGÜ\u0006êÂ\u000fëoÂR£b(Q“ÇtÍe‰²[�ª;ïÅ2?N‘jýWŸ\u0010ÛUw`2\u0007/¡XJ\u0010\u000f¡\u003d|ÜÜ^Í£{�ƒTÃÍØd6Ùnó\rx‹î¨ê\u000f½.\u0011^\u001au¨çx¢J*œ\u0013B\u001bjŠž\f“kiƒßfâd¹\u0027›¦æ`\u0019W±±ÚèjÁ¥wß†y*�_ÃÝ:k\u0027º²Yô\u001b$gÿ\u0014j±m±Tv•Ï\u001dÑVSu\b\r\u0001uÃS;[ÜQ±R\u0005³™x—ïrà‹’-¥UZT½„¾\bh®×¸øý@\u0013Q\bV–ÃKXo‚ñX\u003c\"³¨!ŸÀøC\u0014™ƒr\u003c›;^ÅÎcçðŸ\u0013QÓÂp)BÈ£ûÑ€–KÇGäÁ1CˆÀ\u0003\u0019÷\u000b-\\€Ñ¢å±}x6Žq~”R}ò‰\u0003Íé*õ\u003dDý\"Ô)\u000eFpÿv©Û\n¶ÝG¡²PB\u0002Ú�Un­püñûÄiFt®\u0014ÎÅ91/t\u0010å#M\u0007ú|c\u0000¦(,W�Vc½\u0007Ñk¨?Ù$‚ÍM°ï®I—)VÉIƒ˜\u001aN!”Ó\u0005‡…Ñ¹\u0026Ø\u001eÊ°Ùba«B,•Æá5ÚP›žÜ·çÚˆ§\u0010Íx;[ƒ\u0015\u0011¹\u001b�T+yT\u001b«\u0006¶-\u0011\u001d¼\bòp\u000fŽ\u003e©cj¹\u0018£�5£.¥ËÒrÈêŸ¢Ë×ƒïŠŽ\u0016%\"”šwŠí\u0006ðßo¿üx7!¦\u0011ØŒa\u000fÎ\u0005Á‡²ú\u0011w\u000bñÔ^[\u0016\u001cÆ#t_\u0011[b­\u0006¾ñC\\�ú•U$\u0000is§×¨mi‚Év8l`§\\§Ï„½h¸\u001fMÆ\u0015¼^1Õl½¼�0t\u0016VU¥¨«^\nó6+%ž9cŽžüñwi \bÍÊz‡™˜\u0002yÚW\u000b¼pØ\\Z`¼žÖýU³Ív\u0007\u0016Äf\u001b\u0005n‡l¶[@Z÷4E¥ÏÌˆO¶Äj¥dWµæª¹RS¨Üµ–p›ëbÆÐž\u0007Ë\u0016J4ýL6±\u000eZË¡\r}\u000eoUlXGÔ�-ð\u0014\u0015Ç2nó:/ÙJ1øËÑ#ÛÕ†‰è\\}‰ªåj«‹HPQE÷7×u”¥Û®$Vç;†¹ÆÒ`O�kg¡VÒåÈ@¥V!\u0016Ë©~#”\u0026\u000e¢\u0027£Z‚\"í®\b²\u0006‹…_¸jS‚àg4À½qbG¶­®!ÀÛ-$ŽBsG\u0007¼é\u0010¡dx-–ú)~æà\u0015L\u0015AsLå?øÊ \"£(“kE¤d½¨´Ÿ\u000f¨\u0027\u0014Š¦kF\u000bÙ\u0027£ŽXjF\u0000\u003cOíËõ—ÅãæÎ´k’”º\u0001Ei·’\bpÔåñ[Õk`|$\u0016ì4Îå\u0000‘óV\u003cµ0ØPÚ`’\n@Lb?\u001bŽoÆÂÛ\u0014\u0015·±¹\nTI\u00075ôžpQ†õ\u001eª”Ã{CÄE5w×æH¢z\u0018\u0004œ¯ÿ\u001a$\u0004ïËQ�ÌÞœ{\u0007¨­EmÉÕ^\nŽ¯kbN\u0001¦#qÔy9j~žr2.šz\u0026\u0011\u0015ŸEöé•š¦jWD•ÇnÔŒdÒ^ÌÛ®È‚\u000f6vr)•\u0010êèˆmôÃ{Š Š]\u003còÏ²¥z óüòêˆ8ö\u003c¶9ÒGÄréÅ\f\u0027På¬¼ò‹±\n­!;z’¢Ô¢\u0015‘ÏV†X|€’¸é£R\u000bÔÜÏ6TŽRµ¼\u0011­ÕOøŒZõç\u001f?ZógCÚ€_\u003c•Ùð2\u0013‚%\u003cª\u0010e\u003eÀñ\u001f“.\u0013_DÓ9n†gÜÌ›ÁçûÝ­\u003c´eJÞôâ(F–’Âd“y�\n|5\u0026ŒñJø¬•¬.–â\u0007‚bÞx\u0003µ\u0001«‰ÕhX\r\u000eM‹ÃÕxGÜ—MðC/¶²\u001f\u003ej£ù\u001cÔ}õÆ�\u0027¬¸œZ,î’Ú®„·…ý÷é@¸\u000b`ÕÀÞ®þ:ì$P;\u001dœÐ�\u0026FÄ\tÚ“54¹\u001fµ0‹’\u0027îfBKý\u0016¡ào­WIþÔ¨X-˜È¶\r•V!5PMh“¿€˜o§}]6o\u003d\u001cÝR«…ëð(:—K°AÝ†Ù¿šL\u001c‹u\u0019GÉÁ†…\u0002îS¯kçÆ\u001b\u0026xä±JFç#­AC9\u0011ú¼NXqÅ�\u0004ïÞ¿–\n\u001b5h~4vnGŽ]Ëv\u001c\u0011%—šÙ´ÓÉVqM\u001cT?†wÌ\u001bn\u0011è¥½ºí€—Åh[!Tá,@¿×ßúÏ\u001955‰ *ð�lôœ-pÆÓV5hêÄ��½k\u003d”@;\u0015{ü7SQVùã\u0006¦ž2q[‚RŽ\u00169\u0003v§+\t]r¦ˆ¢°ÿW\u0026\u001e4¶ôÀ³\u00144¦[°¡ ¶#O,±1+„E\u000f�\u000fee´Æã�\u0010\u0006ìˆ\b¬Ö1?¤\t•Ç¯zê²¦(\u0019Ú÷¥[hDÕ~énVØ¼(˜ßTŸR³�â\u0014ˆŽÅÑP\u000f\tõiNnF\u003dUC›\t™EÃ­Iõµ¤\\ÆsD¨§\tÕîcTœ\u001faSõÃQ¦tÃ)G~TP6H\u0019X\u0027¯Íj!Õ®Ñ”JÂ’\u0013µñâL\u001dmâÎ\u0015\u001b\u0019b9“U’í\u0011å�cÄ\u003e\u001a§y�6Àš–_…â#±´˜OÃûî!@ß\u0010Ë\u001e±7RòÐˆø\u0001ÕK`ÔÊC�´¡o¿ÐaûžŒ(øu\u003c\u0011\u0004~ÇÇUóˆ]bE\u0004\u0006e\u0016I\u000eÓÒ\u0004˜\u0026¹ûaÅí\u0014+�±ê\u003cR¯s\u0000^©Ìœ‰Ú×~\u0001\"5Úçe\bæÀY)¼iÍÒãª�Ç³‰uF\u0027òÅz)•\u0013ÀË\u000e\u0004/è‚Â»$ô\b~äIV{ÊÊ_Ìô‹“x•¸7á_\u0007º\u001bÐˆ\r\\Ìà×ëÿb\u001aC~k\u0012‚#ž–d\u0026]þ\rÅ\u0005–²;\u0013s3•�‡ïæôÁ\"çN]¸Ç!Æ\u0002³Ý•\u001e\\÷p�˜£\u0002\u000f±e!\u0026Ð|\n\u0019“Ö�Ue¦ç\rZ\u0019_\u003c\u001cÓ\u0014�y›¯\u001cõã\u001a,Ôæ“Oió¥Ð\\a„¯rŠ¢\b\u0014ÀKêá\"vØi\u0003«ù\u0017i\u001a�“\u0011\u0002EDŒ;Ëªl\u001f^Ú©ÉŽ\u003euP\u0005Ÿ‹qOÐm,p–Š-xöH¬7˜x\u0003ðŒ†\u001f)¥ÈWÚQÑ\u0019‹á\u0006î»ŠŽÙUbS�›±\u0012\u000bA›÷ê£\u001c±W\u000bS}ð¹\u0007ÁÃ7ôóÔÜ\u003eªU\n©£H’êèÂ#pâŠk.ï”éº�«TP\u003c+NY^¸E\u0001�\fŒ�j?ÃýO¨†g—Ã\u0004¬h4\u00109Á\u0012,Â|\u0019\u0002òý*©A4¢søÕ\u0003S\u0017cbÿ®\u0015‚q6\u001b\u0002ÒÃJŠ\u003dæüU¦:Wz;êû“¡,ôD™·Åèt\u0010}Ÿ\nƒ[x\u0010o†Š\u001e\u0019Ñ\u000e{ÙÀß\u0015k•T\u001b�Ò1êÂÓø[\u0010ÙZ\u0012\\r1á†ÍáI¶—¢ê�3¶µÞÓ\u0014„‘Òœ\u0005Ò/Õ€Ì�b\u0011*¸äû\u001fƒ�Š*âCÈª…wèò-È±}êaÒÑmÝ·ùÚ$m‡\båqÏ3n¥âÉÕ“„‹\u0003jÆ$Ž\u0001Š›þ„—×*`�£–\u003dÔÐ\u0026\u0011×\u000f8Ã½vrxÛ€j\u001aoó½\u0014\u0016¸\u0018êŸíP\u003c¡z\b”UsÍ«K¬¶rjÆÒ¡U‡WÛlylØ\u0011CsM³%V2ÊRafC£\b÷Sóàº8\u001eæøi\u001ažÀ�¿50¦\u0004±_\u000bcb¯3M®\\st®\u0000Îë,Vð‹ý8b\u0018Ö¸ÛÌ\u0005èON!8\u0019#ž\u001aé\u0018#´\"’¹”\u0004˜\u001dm»œ\u000b$ß�Çèˆ9\u00155‡‰õšÚ“ª8BŒG¨Ó\u0016IKÍªÕæ2\u001es\u0019ñ\u0000Œ\u0017—šebiY¥¢{DØ]ï1A\u0000UË\u000b¹Ë¤»¸VšÁ§¾Á}\u000bÝ¸ß¨{ýbI¥ç\fl\u0026\u0016ñšSuÔÃ§I\n|q³ÚÜ\u001bå`¼Æ1ó¶¾‘WÞùÇç�¿\u0003\u000eÄŽÍAÉªq\u0012y—\u001b\u000e¯áýu\boO`*•\u0026\nÿäó¨Êñ­bñ\u0016[+ãH\u001a‚í\u0019\u003c¶ó6×Ðß\u001d\u0026Ò 8³jFB\u0018¼\tS\u001d­Zÿ3\u001cFçà]\nL6‹µû\u001a¾\u0027ÛK“Ã»E„Á\u0027\u001eÅ-qÚP\u0004án˜rCð†Ìë’¢þj\u0016\u0027�\u000fŠ’ˆ{u\u0000X’ñÍÖêqÏ–SÅ¢‹\u0026¤ä´ò�Ÿ\u003e\"U©•zâN\u003cª¾\u0018khÇ\rƒjŒ9íû+å\u0010òpFþH‘\u000fMÆ®Í\u0017_á„ï(4GÙ¬\u003c\f1êŠ‰\\çÆ™þ?~t×çZÑ]�¹+­Ãç”\u0018š–v†¯ýUVå£ûµuÉõ“ªeG)+\u0016`îðÆ‡�tj~Ä4§ÀjF\r\u001fg;‘\"Qgí,‚Û¯\u001e›­Œ4\u001e‘\u003dÛ¼Ý™¨rÁ?œ\u000e?\u001eÀ\u001e:\u001aoÊò\u0007i:Ù´8óáÇß\u0011Å]áUÖ\u000b\u001b6nND?\u0027\u0010�¨6\u001d\n\u0012ß\u0013»t|â³+¸Tw5½‰+]]²}¾N„k\u0006ÕUŒ.Û\u00154h3�\u0016„Í?ÛÚ®Ý$ÐP¡¦òÎ‰\u003dnä¦IT|³ÏèêV#$\u001c/ƒÃA\u0019\u0006û\u0006¿£\u0027¾Ê¢jêe��+ªUi#\u0014½Bd\u0004÷P\u0007\u001fß!…8‡gÊ–]Lµ-Ç\u000eŠ´ø†+‰o\u0011u÷\u0027qÌµìRáûª³Š³}b¡ƒR©\u0010A­\u0018l•\u0000v£\u0010ö]„`vlD\u001eë\\„ï¿\r?*Õ\u000bÕÁ³»©èçGXšl\u0019Š4Žh¦o3bX€Ï7aÂ^þ\u0017\u0002É²+ö«Œq*:Ã(Å9\u0004áxš¼Þ‰ê6€\u0018á)UFÅR\u002735JÃsŠP‡\u001c\u003d\"ÐÔú÷\bÑ(A\\\u0019M5.ãÒ¼â£²�²¥Š—hÆ[tB/Ë_.ùjŒy\u0003”÷€7ÝEDíã!0|CU—\u001a\u0010À ±Ú�ót±PO�Îlf\u000fu\u0019%E\u001e\u0019ªQJ\u0012µT\t|zÀt`v\u0004!A±”€úëL\u001cu«Zqv/ÍTp\u001eTœCüef:²/`‘Báó”¨\u0012gr~NýujÍW1[Yã‡¿Q\n¹\u0005\u000eš`7K„ò‰\u0001\u0000\u0026Äa|\fŒ£Â\r¢,ªŠ%â­¯\"\u003e‚\u0000ìë „\u0007§\u000b7]ñ\u001b›àëm±Veê£Ò�(Éï\u0016«»C\u0019‹\u001bµ¹¯õ!š¶´\u0012‡£Ö\u0019ó–\u001dbå“XšT\f]Z„5šd:M-ˆË\u003cÌ.\u001f\u001d�Y6ýcŠ\fÄJøjÖ¬1]©k¥\"b\bÁ^zŸF1� Ž�ŒòtÂK_\u0011\"®-ªvMB-J#ÁkDðñ\u0003\u00187\"vã@OÇÅLCA™˜¿õ÷\u0004Ñ0÷ò�kpfî‡\u0027É\u0003¨××àÉ\rt\rOZ3`U¹)æ\\´×\u000bÜèéDÍ¬\u001cW;:�AY†\u003dÔ\u0018£Ša�UjüN*AµEõäVW\nuò U\\�}{“8Dô¼\u0004\u0007½D1ûÜšªÍÆ“³uÕ†Pvô\u001f;î@÷ú%âÿ}”Â#ÜõÐ «³%Æ©ºÿéãiÄ\u00078Lmâåt‹\u0005¢•\u0013GVqôÈhs¥áñþ’+B\u000fðv¹dKOaU£9¶³úž äŸÚgŽ1h\u0005(*8S\u000eïÐ“)�\t4eä�|\u0007¢Yw£ð\u00055Ó)ˆÖðT{±\u0000óéÁ\twù¦•Œˆ…\u0014›\u0017\"\\}w1vC…æ�)\u0010\u001eº…\u0027e\u0010Å,\bkª‚ÐŠ{\u0006k­wÐ„ü„·\u0006±Ð\u0000\u001b©Šr‹�®‰kÿíˆÞO”íG³¹†¯¾ë\u0013\u0001c!b§É\u0007\u0014?ø\u0019\r¤²„;êÜí™ý\t6ï�{xv–³™áÜ’*ÎŠ/\u000b\u003dG¢a\u0027\nææ¿y\bŠ\u0012^~ ­“qÓ\nM¦\u0014»Ù\u001d¨/g\u001bÅF4B\\ÿ§ƒÄˆ\u0006«°’\u0018�\u003c`\u0026X\u00175±O6‰ù^xQ‹ÚGÙvm’ÎZ5ºF6÷\u001dô#®ôÀÇâ›*H¥�N\u003d\u000b¡\u000b¾{¢\u0013Ñ‰x´÷\u0027rBù$óÇä\u0002â\u000bDñAÎ»¶ ƒ÷l£¼‡­\\*³RØaÌ‚ÖsN¬ŒÂD\u0012‘)†œ\u000f©dp\u0012flîŽhXl™ÄR5éš3Ž\u001f \u0007uV¨ÑY›´*3uVFÈ—À}¢Ô”*91Ê\u003e\u001e®\u00016+Ôf–);qÖˆ:ÿ{žœ°pj\u0016ÁJ±Ð\b4fXËY¬x`±~¸Rñ¥êÄùHVÑ%Hù-~w\u0013ëÆ(�“%\u0011¹õWÝè­¨¼\u0014±¼õŸÛê[\u0010kP}O‘\u001cê\u001dp¦Ê¹ºü\u0002æ\u0004ªÔÀ\u003dæ!WtªÏP¥~U\tu#E\u0011—\nû©\u0027/r¹ï¨DO$ý6¼»mAøB%yÌyì\u0001/jÈ#IJ¢´\u0006ê¤ñ\u0001xb‰�3S+\t·•Ãs¼Ç¼Â–úz±\u0012ƒŸWE7\u0006üƒ`T‹Ž|\u0011k#Fx\"Ž™ •¦¸tØ¼�I—îËÑÓ2\u001a¬v¥È‰²óŒÏé\u001e¼J†w\rb\u0003ž¦‰\u0013Îäº\u0006Ph¨I�\u0014u\u0010Äp:M`ä\f¾\f º™\u001b±])ÃgQÙ¤\u0016�\u0012Ð\fÓ±šPã4²µ­YÕo;h)\u0010à%ÔÞl¥ùU§…\u0012Î\u0010A®šcî¨`E“ŠÚÅV\u0003Ô°óIÎ~uÁkô\u0014ZR«Y¯r¡$üH\u0015‘xxW¦µË\u001b”A‘‘K\u003cîß\u001f3Œ�\u0017U\u0007\u0005õZy\u003d¯Úª˜§\u0019š_9R¥“£Àp-#CðËN°^½€G\u0015\u003e[Í\u001e�¨^,›9þ¨Î¬.³Ž\u0007\u0017‰e4ò‘?þ.š\u001cC]^\u0014\u0019\th¬·ñU¸Ž\u0027b»‘»c\f\",\u000e¸î\u000bÎ²ÓP\u0015oÈZûîä‡\u0010ªN‚×°_^\u0006O²ïô·6Ýã`±K\\Öê+\rj¸†Ï:\u0007ë�ÊjÉ\u0003\u001cÉiV%~V*@�!£ÊûñÀ5C\u001c\u0003·æPÝ7\"\u0012ÜÕQ\u0011‚×íÚæÍ $ö¡«+ƒ\u001fË’µ6\u0004ç4„@�\u0010µšxî™½\u0004?á¥Ú(9ÂÍ\u000b»º¿\u0002§ãM)\"ªÑï7\u0010c®ÃY“\bÜà89³«kA\u0002�³ ‹J¶`¿÷nò ˜¯*’§D…Š›\u001bñ9\u001a˜•\u001d^š¨Ð˜ôGÔ_ˆÚB\rˆÐÒ\u000fªµÈÚ[y\u001d\u000e*Äz£VúÃC8Œ\u001aµ¶¾!#75\u001a©-ø#g•\u0006ˆ§kù’S0‹5…ÍŠ/¿*\u000eí\u003c9Â\u0019\rÄ—Ó:\u0005E¸êRäYýÒ.ŽµÛ®ä\u001b+¹vLì\u0019ÿ¾,ú‡�ëx¦¿p½^ª\u000fžvß�\u0015\u001d\u0005´\u0000í\u000fÅ‡àëP!üNÃÅ¢aÙf\"½¤‡[ýËÔP“H±Ð#\u0016…×âÀ#–²òÊi \b¬qC£\tÞ\u0017\u0012åÎ\u0018\u003c÷ÁÊ\u001fÿÝRüæu%\u003eáo›/_„£\u0013¥¼ü+ðªC3\u003dbM*áI8®¦x]z.±NÏ¡»0©æ :P�°û‰ ã\u0017“L\u001b¯ã\u0003ö\u003cÆŸ|¡i2ßîºá½ôŽ¦à]\u000eú^ÄÌqçßUhÔŒ\f\nÅŒƒL#_µYËžÖ!hÝ¸Ñ,Kìˆª\u0026Û\u0005oÄJv\u0007bÜ•ì\u0014øÞ~\u0019g±¹\\4ôMM’š\u001f…õ\n\u003e$RÅdË\u003e¹°[ìçÀË‹™ÜZ\\ Þ²Ëú¢:\u001a\u0027KvþŒ¸B \\Êã²+ÐFï âBÌ\fGBk»ÝO¢vØi\t”wãÍÔEkó\u0015\u000e§\u0014Çt€\fÀÈf\f¶§ÌË,–¢sbÁ`säQ¦\u0007\u001dÄ÷²|M�4£Ø \u0001/‹b\u0019åqWvëª[EOn3p6ˆù;12Õ³ƒ¶·ÿÞ€Ø+$ˆö3\u0016\r®œþ#Îó²¹ôQŸ7À¯˜Ú›Ö\u0007o\u001fÁI�Í\u001b¥êGUôk‰©½F(ô\u001d\"±9ñ›DˆLó\u0018¢F\u0015®ÕÁv‘#‘ÓžÄç\u0000ß Ø$VãY\u0007\u001e°Ó­vSå-¨eTqt¼Ä#|ÊJâ�Z‘†Ä^6L–æ\u0010_\u0010„©âC‡šb5JÝ,dn‚ÿ@\u0005ëÍ»*ÑD“R^6UÙ\u001cÕ]è?„`\u0012\u0017üI®Z0\u000fJÙ,¢å@\u0003w-*\u003dŸv1“H\u0011×—\u0014±9�µúB%1Š�–úÉNÄA�Â\n®Ôþ‹1­²¤\u003dSœÛ¼%¸\u0005Gd\u0012`\u003e‘Ïç7ÔYÏ|ý5’\u003côs,LøÈ’�áª\u001dP@j2\u001a¸®T’Ùæ½\u003c�—Nt3/“ÁTÓ‹ð”Š—ùy\u0015\u001c§Ð×‚Øv’K2oóÆˆ\u0015\u0015“td\u0003cJcs#\u003e\u0012\u0005Zd\u003dú•ë6÷\u0003\u0002NA˜”D\u00160å{¬N˜ÒqF§8lOj‚5z\u0006[Ýu|—C•a\u003eóõÃ˜JÚš´\u0011Ž10‹àŽ5—¤çÛnƒ_ý±¼þ;Ä2\u0017\u001a…í23q\u0013\u0017Á\"|pE\u0003Zé”z\u003eve�0VnÊ\u0016ÇéhT\u0027”ª`ºˆ�^Ä›\u001aßùWŽ9kYGñ´\u001c\u003cq*öãB\b§Î \u0013ÞD\u0003£²¯Ï^S€úÒA5„ß†\u0006¤pÁ\u00077\u001cvÖi\u0004(è7Ÿ\u003e¢á(Úœ-ø¨ÒÆ.\u000fú\u001eÇèóÒ\u0018�e\bÀÆÍ~oqÔ? š•]·D¤•-²^¹\"ø§\u0019#° \u000e£á\u0014ª\u001bF ölã\u0011÷ëH–DÅ|¢\u0010¹ár~‹ŒüF)qs\u0014O\u0013\u0000\u0015r³\u0012\u00141\rße\u0005Û§Ä\u0026\u001a¸\no;áƒœó\u0017[r�úÓ­Z9fD\u0006~V]\u0013‹Äg6ívÐ$¢\u0010B\u0012/nç)1àâ©üŠZm\u000eOôú\rT³{bYõ\f[áãuÐ\u0014\u0015^|ú¾\b©XRwY\u0026\"Õ÷ä½âCÎJ\u003e2ç0«ýyYïõW\nu4\u0002Hm™\u0012„á¸\u003c9\u0001ïIb\u0026êÚ#-\u0005¸\ng×à@—\u0001\u0013LÕA\u00146¼Õ?¹ÛB‘uLrK^%ùm.Ê`ÌÇ\u000fhíS\u0010¢ž×eÊxân¼¢áj§nTH*Ð�Š\nóP\u0004ëmîJ±›P.Žª\u003cq°¬õÂ£ga\u001fº\u0001‡½(2Û\u003cWK½\b\u001aÔ¯jN·…êLo\u0026Ñ ™a±\u0013ƒølF‡úã\u0018o“Õ\u000f»b\u003d\u001e�Ä+\u0011†Wƒð[ì;.\r\u0003,yIÇšùˆoä«T;ÅI¯dTÁ|B-|LG•ýÓ2ôÏ��•.+÷op˜£å:|iB£º~\u001daÝg^ w½b«�†ú\rvjí¼q-Æè\\9÷\u003e\u0018Q)\u001fãçßÃQ/ñ$MPFv½\u000bwÿ€Ç†¥ÙÜ½n\nélui\u0019!g\u0015\u003c1\u0014S‰\t3p8K\u001eã\u0013\u000f)%Q-Žjá\u0019UÇ\u0015à;–¡ê\u0027\u001aošßª*7Å^õ\u0003xÖ†\u0027*8D.\u000bÓ€\u0018l¾2­†ÝÁÆSk´¨Óx°\u0006`%‹CSÔ¢©œ\u001b£ŒÁÀÙmq\u0010\rDµŠª\bzâ¯à°´|\u0018æ:)ÏC¢\u0013If×P\u000f;ƒ(\u001b\u0011V\u0003‡°Õ¢G\u003c½\rë\u003eXK¸iç\u001a,\u000bD8{{1#ÇŽôE#b\u0027—F/+Ó\u000báAq\u000e?T\u003eT—�žö›ŽÎ‡ˆc?\u0000µ\"¼As‡×v1çN¦\u0007Wr´\r\u0016ˆ‹¾ŽlêN6|ðiÄ\u0013ì\u0011Øéô\u003eAMx€šA…\u0015\fø\u0002»2ž:WesÓÀCÙn”Ç“ÇÅrÓ#µ*\b�¦Šcàk3•Ô,SÜTfíˆsŠæ¨È\bÊ\u000e3\"™\nï*5\u0000þ?~\u0015Sj‰\u00068èƒ–\u0011\u0015¨…©«p^^ê“5~\b|êa\u0006A\u001b›fª¸œë7ã\u0001[‡\u001f\u0015„Ï73b �\u0001ëäÏªÊG]4üø^¹X‹Î9\u0011ù,Ã¯äFø¢\\\u001e\u000b…\fÀ�èg\u001aæìu\u0010F°7SŸíáô\u000fO\u0018¬!þ\u003dÉYQç\u0011‡C°XÀƒ7,ŒNíb\t?B\u001d‡ïbd9zôÄfËKÉ¤ýTeÒÖ^˜-Õ¢‚b·û¯Îøª…Œä�Lˆ¡N,\u0015ý7ó!Té\u0010áÑä\u0006ªiR’`¢4 di\u0011G\u003d¨é\u0017\u003dx\\‚\u0006øÖÆ\t4Ý?ÚÌ!\u0019‡Õ\u000bÀd¶ÆhÍe(J’•Ëh¸Ñ¨z!\r\u000e+¼Îð\u0011\baT„\u0017\u0019Aßx:\u001bm\u001a\u0013\u00057ûŒƒÜ\r�Šzz‚Dë[\"h$zÓ\u0010r£ê] „Ö4ŸàÍ\u003e.z¥y7\u001a\u000f@\u001bœ’\\ª\\\f¹zåíðÖKge6Æ\fŸèM—†¸žßŠæm\u0006·f]ùj�Q[,?\u0012«ˆ‹`ã�_E±-ý\u0019\u0004ÀÎ[PNæ)¬÷Â�ËÆ!\u0011\u001a¿+Á‚ø\rS¨\u0010Â0ÁoèB›óŽ˜·ÔR 6}ÓL,Nhv~\u003e†—âŒ¦ þñ×“)YSÆ«Å\u0003\u0027C\u001djÈaK\u0015¢{å19´ž\u001cØWÕ\bø\u0016öKóyïr6šØj\u0011ÇÅh+\u0010o¿½G„h¤ÜÂâdˆh,%ÞQAB;[›5™ŽU÷\u0010»(ÙÛ6›i�¥\u0012á‹Áƒˆàõ\u003dÂl_\bëÒ™ö¡eZ¤\u0002…iÖÑix8U{–3\u001a‘3\u001fDd \u0005\u0002±‰*$i°h-\nðY„8\u003eŒûû\u0019Wì\u0017ÓÔ4“—Á±l.í1 Ó¼›ºu~çtÀ†\n—\u0018|’ä \u0013¥ýIÈ\u0005Až§\u0016\r—�Ü´9Tí®‰Õ$‘8­ÕÂ\u000fn\u001a»)Âq•\u001diw,Z«Wa?|«6RíF‚O6ÜRWÄÀƒ6ø\r¯:¥ò˜DÅ¢Ô°…Ò\u0002ì¾Â3ãPV•Öß/vÄ‚Uœ(jH\u0016µæJ\u000e‹˜ªïÆ\u0027À\u000bâ\f\u0017\u0011ËÅÌÃ¿‚‚\u0007zÆh¾\t_;sÚ¹/£¤YD4ˆn\u001dÈ\u0014\u0007ª{_oï¦L\u0004çöÄb\u0013U¼Ít+se\u0007\u001añý$ë.U?w\u0016\u0011ÐþžË”‹ib‘‚Fbç¿™h\u0007\u000e{”´\u0010i`Ø‚°åØÉâ¦¢,ŒV¢~Ù`öIì\u0027#RžEWà)¡� ^×\u0027B\u003c\u001fVìêr¬•Ã:±˜€\u0006u®_lê{\u001azàUÔ�Žà¸Øª†×u*‹l�77oóÖ„Á½ž™íœ\u001aßƒ\u0026.ô�!Rm¿ºi Ó‰8áÚs¹\u001b\u0013M(â¯h)v\u0019•¼$€F~+Œ§”‰Ã.�L\u0018æ\u0011UKX„ÓÅ’Ê\u0012è»àTqUà£\u0004Quû˜™Ì,‡Êà\u003e»\u0005ù;óÑ‰dx\u001b\u003e¥3Ï®Sú(’ ûZ.œ\u0017\u0003M–Ì¡\u003eÖŸ¨\u001f6\u0011ª¾á­ä9Œh3\u0017pCÎ€›t«óÐ¥\u000e\f£`½•3EB×é\u0015ßâŸ\u001eˆ�¾ÎþÚþ„‡VötÍJó\u0013ÿ)¬ÅÃaŽn€x¦hœ£„LóÌn�\u001aË\u003e�\u0003\u001fë~mIôd@Ö%Ê\u001c£\bç‹ß·â\u001eg³v\u000eBÄ¡õì[h \u001e\u001e“\u001cnçˆ\u0006D˜8�?dTÈ*,¼Jª[;dÚð¶S\u001d¾\u00001;°)‰ú\u0007³ˆ¼ó\u001f#ÖŒw\u001eVË«¿˜‰ÎIGYÎf!ª3^\t\u003cÙ§*Df…\u000f:*ÒELþË—šÑ\f\u001f+ÑŸÿÄ(Èl\u0026\u001e\u0013š÷}\u000e;£à/Ñ2†2\u003dq©\u0010\u0011¸\u001f¸Ý4Íc°æ¡íJ?\u00171HºÅm„¦Ë%ð\u0003¶T\u0016Ã)ÉóŽ-ð\u001eí\u003e³\u001dÁ\\c–—êKazX,fÑ,™¢\u0001±7Ò`BˆQŽ‹2Áê\u001d�Ü†äŠlöRŒÍ—Uu\u001d¸ú­|ý\tøt³NV )•ˆ¯»@-4bS«~P.¡\u001d?‘\tGW}0£„È\ns%\u0026+ŒEy\u0018!Z‘Eº•‹Ø„µÖr3GÊ[È‚ öÚ»”\t\u003cI»QJt¢\u0003Þ\u003e\u0014ç\\ìoD½·Ða³ÁnN\u0026ax\u0004öG\u001cÿä\nYùT\u0001Í\fÓ€S±Z¥T€Ñy—N«œ€H†�ÒX4‡Ó1Ê/vZÃÕD¤DL]\u0014¿fùUÍ²ºfD¿›d{Ôåèl\u001eÀšµ\u000f?Hõzkwù¾srbY¿Í5ì”„\u0007‡°\u001c{‡Øåoã¶r\u000b\u0019™PAÈ!Í‰zœI\u0001b:kyqZ/\u001a­\u0001%ìñÏW+´nL\u0013Œ\u0015Bˆ�\u0000‹\u0017öÁß%\u0007‹Jöb¢³}\u0026C--T7©µ\u001aí;\u001fðì\u001dk†¦\u003c™¨²\f±ú4\r�\u0013Ë­„\u0014Ã�%¼[Râ\u0011½ø@\u001b€±\u000f/Ó\f\u0019D\u0017ršLÓ@ßá“Ï´Q¢ü[tn\u0004\u0017ró2!{š\r\u0007\r0Ë\u0015—ùD›4¡\u0018½MM–tDE;,.ëÜ\u0018álfA6s:\u0002�ìR£ø-–Å\nZ\u0018tIçSà�X\u0013¿ï£+6\u0015\u001bW\f/Ñ±£©mTI¤t(¼k‘ôn{6G\u0007M¹ÉíÔ.–†8S9ŒŽRÔg;â”ê«\u0026á›\bÔ¤©†\u003eÔÑÛ¸hßm¾Zê[®,53´y~}\u0014¾uAp”ÊÍ\bGHB¿y”WÅ9@!�Vµº\u000f‰¾v\b~fqƒ²•}1.œ¾ÌO\u001c\\Ž`ÌîëWk„Š1\u0012«\t`3L%ÓiI¿\u0007›Ù6G\n|\u001d¾\\\u0016\u0007º”ŸDPGk2\r\u0001–\u000bÇ\u001f?gSDH?ÊO¾QN\f\"\bÙJ`¡@UIëÄ‰+FlgÂz~a©z,³™µû\u000fxKÕ\u001cßes%ì‰#\u0027,¡.?`ê¶«Z±\b©0¢Ikè£A†—õ¢\u0006+\u0015µ,WS,\u001ež¥]gêO\u003d|�Ã\u0001îYÒ$\u0013]D®È·²•´YhÂ\u0015\"s\u0003[§\u003d|3…\f]\u003cK£…Öm\u001evb\u0001ŸŸŒ\u0006õÅœ¦�ª€ƒsH_Y‡:fN£U‚å.²§;\fáu–6\u003c\u0004_Å²ÏûPkãvþ[ÛaDPÈ…¬�øÚ\u0011Û•\u0011„¸ÏêåÙ’\u003cWA\b”\u0011û¼ú[ž¾–]\\ˆ\n{ËBÍ\u0027éLqm\u0019P\u0012Šf|£\u0026†ÍÕË›÷ˆÆ”\nÃ*ñÌ.¢·p‚«øÇŸœ\u0002›•Å*9o)\u0003­ÏÒŒPc\u0015öõ(i§²r\u0015%Ä}—ØÊÄj–ç¾zÒF›/›³ùFzRc2m8:RÞøä\u001a/l[€É7\nÅVzTV�~yPc¨“YL8mLŠ†\u001f 0úb\u0014­›\tñá\u001b6eæŒ|Xä\nBíôµP\u0006Ve\u0002ø\u000eª¬×t1Æ{MÝ\u0004]èa©sÎôŒ¨„Çx\u001f\u0027œ\u0019 I™¹zPi\u0019—X¾•‰¯\u0017r\u003c†\u000f4Â�hýu‚I›I¡M«ó¥ÎP\u0019ºØoØx¼\u001dE¤ÍS\\D0�:\u003c}‚úõçã©yšÜ¢§ƒê�osÌ\rQD4Ðä»\u000e?Z!Øc�‰\u0002®\u000eã‹Z%ß–z0˜ïaMe\u0012�‡\u001e\u0004§©\u001c?`þOÄ\u0000Ç7ˆ{Ê-öQsý\u001c-êé‡#\u003ce\u000b¸kó·GÑýú\u0010ÇÏz¤e×ˆ\u0014µ�¥q\u003d\u0003?\u0018¬NÌ â±ÓänC¾\u0015-Ê›*\u0019—Å\u0017Ï\u001e´y}�”\"W\u0001$ËeR³\u001a¥_ñè4§â¡ô¦h¥³é”tx„€\u0018×1‘ZÖÅb\u0001®ú$W¢p)“Ø\u001f€Ý!ôãÆTA‹¹�{–�-\"(V\u0006¸�¸9›Nl\u0007\u0005Ä–Ñ;Ú$Š°·ø\nÊ³2TÀ\u0007±—\"6).¦8ÒÑ%:óÂ—‹\u0019¢~�\u0026_W©:tñCz^Ì ,¢Sq…„s\u0027\u000eÝ°ˆÂÂV\u0007ÚÖ•G4\u0011a’\u0018/3ÐÄ„÷\u0005Ñ9±×¡Ä\rN/f\u0006`\u000bV`©×ã\u0014û÷QTwû5Ê¥ý:q@\t£Q\n\u003cLä\u000e$^åM?‚½\f2\rÇpRŽ\u0026ïè\u0001\u001cØ¼CŠ}Êèì�Å*Ô\u0015w¤7¡ÎªK•®GPŸ¨£ßŒ‹²\r»\u0012®N¢Ä¯‰\rú\u0013\u0013õÑ¡[°XW/+´\u000bËmW”Þ+B»5-\u00164ö)â@\u001b\u0013+…øŸ\u0010·uß¿Y†ÈàT¶CÁ—Û(Y?àe\u003dì\u003c¦þçª\u001b\tˆˆ¶Ñ-X¦q\u003dyô4ÄÿN\täÁxIQ™+{æ“`Ù\u0004\u00275$ÏªÓØ)6.ÆF9%ÅúUI\u001aeµºð]�¨“_eÃ›ÛWa\u0011¦IKÊ†”+è\u0001\u001dw\u000e£ÀÎ\u0013m×\u0012þóMÕQ8”\u0002ZÀŸ\u001c¦áÎŽß†Ïˆ\u003c�Ä¢Æ­\n«\u0003ª?•ø\u0001¨BUI]\u000e.öšo\u0018×nëRŸ;‹¨\u003c\u001c\u0016’`ë¶ØS\u0026’š–fm\u000e±L¤8ø@¾[”£©\u0026þ\u0018ƒSu\u001e:Õ1M\u001b*Â%ÜD7ýŒ\r\u0017E-Bø\u001c¶öÇb/\u0007~\u003e”ƒ\u0018Ôï\u0010ýQÂÍR#ŽóáÝè€Ý‰ÏÆ\u003cLÑ\tAÝ\u0019è+ä\u0027S�¹Z©ax\rG¥pÚK}±­2rÄ\bÈŠ@^Óþ.ê\u000eƒ_bþ\u003e¿þ\u0018›À\u003dx‡ÏÓOCøú‡Á¯¼\u0019§XI2\u0026–¹Sà%*\nØa\u0013ÕÒ\u000b¯ºÐsþãW%}\u000eø^ìî(VW¬•Ç¯Úæ2òÁ�ÿ|$Ò³\u0003ã­Qåºãý~\u000f\u00274ÀA¦öÝã’\u00026iŽë„ÔfÙ\rÕ«BJ¦÷Éäæfþ–ÿF\t§á¯ff\u003e\ník‡üG~\u001d��\u001c.\u0013\u0005ÿï7Qoø\u001f?ùÿòßfOŸ·×™ÜÑëqó»©8®åÿúgúÿü:í??š^ùºÈ•ÄÿŠùçWÊr²n\u0017å$w·\\I�¹\u0012\u0017“íiq\u0016Ù{Ûb\n\u003c¾®v7~O\u000fIs¯KûÚ›;cîº}N¯½Ù×ÞïŒQ/\u0010ãqó‡\u0013c\u001c}í]¾˜�v_[LNKß}�§«7¦§«¯•~çòxcº\u001fþ½�\u0001­dÌ€ÇÛÙÛæéIŽ¡[Ð¿÷ÛÚ{cz�ÞvgoŒ×ù ¯Ý‹_øÚœ1íî^Ÿ½«ËîkÇ\u001bz\\ògÿËMä\u003dœxw§W\u003ehWW{~\fþ(ËÝâõ´·Ä”ûúZÚ\u003dÉ1%]N;\u003e¸ËÓÕå\u0019øÏ‹Ó7Þ¾fúº7¦ËÓl÷9™PÐ\u001eÓæu2‘ŸíJ›Ï×Ó›ž’Ò)ß¾ËînMöx[SZ\u003cÍ½)¾\u003eŸÇÛnïêMq¶ô%ùè!“ð®^·Ó›Üæëî²]‰ñÙ½­N¯v±F\u0007^ S©e£\u0013ß€\u000b\u0000ST¤Ð™L‹#W)\u0026Ë…{ \u003dr»»õ·\u0014‰1WþÙç‘7ýŠÏÞÛÙès\u000eúzqÏ‡ÿw¿{Øã¤ã€�þ÷*#üUýißÕÓ_^éíëî¶{\u001fÒçÿç½-ñ:›\u003dÝ\u003dí]ø°I|DR´­¨â�—ÇñŠ¯Ý×åÔ®Ðý\u001fÇO}¨ÇëiõÚ»»ñ�\u001bi±ûì­òoÔò«Ïüûs§ûÊ�ü\u000fPK\u0007\blCaìËŸ\u0000\u0000,r\u0001\u0000PK\u0001\u0002\u0014\u0000\u0014\u0000\b\b\b\u0000Y�–KlCaìËŸ\u0000\u0000,r\u0001\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000course.jsonPK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u00009\u0000\u0000\u0000\u0004 \u0000\u0000\u0000\u0000",
            "README.md": "# CodeMash Kotlin Course\r\nQuick Interactive course on Kotlin, built with EduTools plugin, for my CodeMash 2018 workshop. \r\n\r\nThis series requires the installation of the EduTools plugin for either IntelliJ or Android Studio. Please follow the installation instructions located\u003ca href\u003d\"https://kotlinlang.org/docs/tutorials/edu-tools-learner.html\" targer\u003d\"_blank\"\u003e here\u003c/a\u003e.\r\n \r\n After installing the EduTools plugin and relaunching Android Studio/Intellij, the EduTools plugin will ask you if you\u0027re a Learner or an Educator. Please choose Learner.\r\n  \r\n  To open the list of available courses, go to Browse Courses on the Welcome Screen or in the File Menu. You can load this course series by using the Import Course icon and importing the \u003ca href\u003d\"https://github.com/myotive/codemash_kotlin_course/blob/master/codemash_kotlin_course.zip\"\u003e`codemash_kotlin_course.zip`\u003c/a\u003e file within this repo.  "
          },
          "task_texts": {},
          "task_type": "edu"
        }
      ]
    }
  ],
  "summary": "CodeMash 2018 Precompiler - Kotlin/Android Workshop",
  "title": "Codemash Kotlin Course",
  "programming_language": "kotlin",
  "language": "en"
}